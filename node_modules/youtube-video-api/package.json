{
  "_from": "youtube-video-api",
  "_id": "youtube-video-api@0.3.7",
  "_inBundle": false,
  "_integrity": "sha1-qMM2GCofMRMol8AZLmMJmB44ves=",
  "_location": "/youtube-video-api",
  "_phantomChildren": {
    "code-point-at": "1.1.0",
    "core-util-is": "1.0.2",
    "ctype": "0.5.3",
    "decamelize": "1.2.0",
    "gapitoken": "0.1.5",
    "inherits": "2.0.4",
    "json-stringify-safe": "5.0.1",
    "number-is-nan": "1.0.1",
    "os-locale": "1.4.0",
    "stringstream": "0.0.6",
    "tough-cookie": "2.4.3",
    "window-size": "0.1.4"
  },
  "_requested": {
    "escapedName": "youtube-video-api",
    "fetchSpec": "latest",
    "name": "youtube-video-api",
    "raw": "youtube-video-api",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/youtube-video-api/-/youtube-video-api-0.3.7.tgz",
  "_shasum": "a8c336182a1f31132897c0192e6309981e38bdeb",
  "_spec": "youtube-video-api",
  "_where": "C:\\Users\\riccardo\\Desktop\\riccardo\\WMI-smogBranch",
  "author": {
    "name": "Tomas Aparicio"
  },
  "bin": {
    "youtube-video": "./bin/youtube-video-api",
    "youtube-video-api": "./bin/youtube-video-api"
  },
  "bugs": {
    "url": "https://github.com/h2non/youtube-video-api/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "decamelize": "^1.0.0",
    "googleapis": "^1.1.4",
    "lodash.omit": "^3.0.0",
    "merge": "^1.2.0",
    "mime": "^1.3.4",
    "nightmare": "^2.10.0",
    "nightmare-google-oauth2": "^0.2.0",
    "yargs": "^3.5.4"
  },
  "deprecated": false,
  "description": "Straightforward programmatic and command-line interface for YouTube Videos using Google API v3",
  "devDependencies": {
    "chai": "^2.1.0",
    "mocha": "^2.1.0"
  },
  "engines": {
    "node": ">= 0.12.0"
  },
  "homepage": "https://github.com/h2non/youtube-video-api#readme",
  "keywords": [
    "delete",
    "googleapis",
    "insert",
    "list",
    "mp4",
    "rate",
    "remove",
    "thumbnail",
    "update",
    "upload",
    "video",
    "videos",
    "youtube"
  ],
  "license": "MIT",
  "name": "youtube-video-api",
  "optionalDependencies": {},
  "readme": "# youtube-video-api [![Build Status](https://api.travis-ci.org/h2non/youtube-video-api.svg?branch=master)][travis] [![NPM version](https://img.shields.io/npm/v/youtube-video-api.svg)][npm] ![Downloads](https://img.shields.io/npm/dm/youtube-video-api.svg)\n\nStraightforward **node.js/io.js programmatic and command-line interface to** easily **upload, list, update, rate, thumbnail and delete videos** from **YouTube** using [OAuth2](https://developers.google.com/accounts/docs/OAuth2) and [Google API v3](https://developers.google.com/youtube/v3/docs/videos).\n\nIt was designed to provide a reliable server-to-server automation solution, with additional support for transparent Google API OAuth2 token negotiation retrieval using [Nightmare](http://nightmarejs.org) + [Electron](https://github.com/atom/electron) in case that you don't have a valid OAuth2 token or simply you want to use a fresh token every time automatically\n\n**Rationale note**: I created this package to solve my personal frustration after using further solutions to interact with Youtube Videos API in a realiable way. I wish it can dissipate your frustration as well.\n\n## Installation\n\n```bash\nnpm install youtube-video-api --save\n```\n\nFor command-line usage install it as global package:\n```bash\nnpm install -g youtube-video-api\n```\n\n## Configuration\n\nIf you already have a valid OAuth2 token, you can create in your working directory a file called `.google-oauth2-credentials.json` to store it.\n\nThis will avoid you to define your Google account email and password to automatically obtain a valid OAuth2 token using [PhantomJS](http://phantomjs.org), however if you want to get a fresh OAuth2 token automatically on-the-fly read [this](#google-oauth)\n\nExample file:\n```json\n{\n  \"access_token\": \"xx99.xxxxxxxxx-xxxxxxxxxxx_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n  \"token_type\": \"Bearer\",\n  \"refresh_token\": \"1/xxxxxxxxxxxxxxxxxx_xxxxx-xxxxxxxxxx_xxxxxxxxx_xxxxxxxxx\",\n  \"expiry_date\": 1425349408683\n}\n```\n\nOnly `access_token` and `refresh_token` fields are mandatory.\n \n## Command-line interface\n\n```bash\nyoutube-video-api --help\n```\n\n```bash\nUsage: bin/youtube-video-api <command> [options]\n\nCommands:\n  upload    Upload a video to Youtube                                           \n  delete    Remove a video from Youtube                                         \n  update    Update a video from Youtube                                         \n  rate      Rate a video from Youtube                                           \n  list      List videos from Youtube                                            \n\nOptions:\n  -h, --help      Show help                                                     \n  --version       Show version number                                           \n  --file, -f      path to video config JSON file                                \n  --client, -c    Google API Client ID. You can pass it as env variable:\n                  GOOGLE_API_CLIENT_ID\n                  [required]  [default: \"\"]\n  --secret, -s    Google API Client Secret. You can pass it as env variable:\n                  GOOGLE_API_CLIENT_SECRET\n                               [required]  [default: \"\"]\n  --token, -t     Google API OAuth2 token. You can pass it as env variable:\n                  GOOGLE_API_TOKEN\n  --refresh, -r   Google API OAuth2 refresh token. You can pass it as env\n                  variable: GOOGLE_API_REFRESH_TOKEN\n  --email, -e     Google account email, used for automatic OAuth2. You can pass\n                  it as env variable: GOOGLE_LOGIN_EMAIL\n  --password, -p  Google account password, used for automatic OAuth2. You can\n                  pass it as env variable: GOOGLE_LOGIN_PASSWORD\n  --account, -a   Google default email account to use in case of multiple \n                  associated Google accounts\n  --id, -i        Video idenfitier\n  --video, -v     File path to video\n  --rating, -x    Video rating score\n  --next, -n      Return the next page token results for list command\n  --prev, -p      Return the previous page token results for list command\n  --credentials, -w  custom path to JSON file with token credentials\n  --debug, -d     Enable debug mode [default: false]\n\nExamples:\n  youtube-video-api upload -c clientId -s clientSecret -f config.json -v video.mp4\n  youtube-video-api remove -c clientId -s clientSecret -i 23XsFi23LKD\n  youtube-video-api update -c clientId -s clientSecret -c config.json\n  youtube-video-api rate -c clientId -s clientSecret -i 23XsFi23LKD -v 5\n  youtube-video-api list -c clientId -s clientSecret --next\n```\n\n## API\n\n```js\nvar Youtube = require('youtube-video-api')\n```\n\n```js\nvar youtube = Youtube({ \n  video: {\n    part: 'status,snippet' \n  }\n})\n\nvar params = {\n  resource: {\n    snippet: {\n      title: 'test video',\n      description: 'This is a test video uploaded via the YouTube API'\n    },\n    status: {\n      privacyStatus: 'private'\n    }\n  }\n}\n\nyoutube.authenticate('my-client-id', 'my-client-secret', function (err, tokens) {\n  if (err) return console.error('Cannot authenticate:', err)\n  uploadVideo()\n})\n\nfunction uploadVideo() {\n  youtube.upload('path/to/video.mp4', params, function (err, video) {\n    // 'path/to/video.mp4' can be replaced with readable stream. \n    // When passing stream adding mediaType to params is advised.\n    if (err) {\n      return console.error('Cannot upload video:', err)\n    }\n\n    console.log('Video was uploaded with ID:', video.id)\n  \n    // this is just a test! delete it\n    youtube.delete(video.id, function (err) {\n      if (!err) console.log('Video was deleted')\n    })\n  })\n}\n```\n\n### youtube([ options ])\n\nYoutube Videos API constructor. Returns an evented API based on `EventEmitter` subscribers\n\nSupported options:\n\n- **saveTokens** `boolean` - Save OAuth tokens in `.google-oauth2-credentials.json`. Default `true`\n- **video** `object` - Default video options to send to the API. Documentation [here](https://developers.google.com/youtube/v3/docs/videos)\n- **email** `string` - Optional. Google Account email login required obtain a valid OAuth2 token. You can pass it as env variable `GOOGLE_LOGIN_EMAIL`\n- **password** `string` - Optional. Google Account password login required to obtain a valid OAuth2 token. You can pass it as env variable `GOOGLE_LOGIN_PASSWORD`\n- **clientId** `string` - Optional. Google API OAuth Client ID\n- **clientSecret** `string` - Optional. Google API OAuth Client Secret\n- **tokens** `object` - Optional. Google API OAuth Client Tokens. Object must contains the following keys: `access_token` and `refresh_token`\n- **useAccount** `string` - In case of multiple associated Google accounts, define the email of the desired account to use\n- **file** `string` - Credentials JSON file path. Default to `.google-oauth2-credentials.json`\n- **scope** `string` - Google API scope. Default to `https://www.googleapis.com/auth/youtube.upload`\n\n#### youtube#authenticate([ clientId, clientSecret [, tokens ] ], cb)\nAlias: `auth`\n\nAuthorize the client to perform read/write API operations. \nYou **must call this method** on each new Youtube client before interact with the API.\n\nThis function is variadic (it allow multiple number of arguments)\n\nIf the file `google-oauth2-credentials.json` already exists with valid OAuth2 tokens, \nyou can simply call this method just with a callback \n```js\nyoutube.auth(function (err, tokens) {\n  if (err) return console.error('Cannot auth:', err)\n\n  console.log('Auth tokens:', tokens)\n})\n```\n\n#### youtube#upload(video, params [, callback ])\nAlias: `insert`\n\nUpload a new video with custom metadata. `video` argument can be the path to the video file or a readable stream of the video. When passing stream adding mediaType to params is advised.  \nYou can see all the allowed params [here](https://developers.google.com/youtube/v3/docs/videos/insert)\n\n#### youtube#delete(id [, callback ])\nAlias: `remove`\n\nDelete a video, passing its ID. See endpoint [documentation](https://developers.google.com/youtube/v3/docs/videos/delete)\n\n#### youtube#list(options, callback)\n\nReturns a list of videos that match the API request parameters. \n\n#### youtube#update(options, callback)\n\nUpdates a video's metadata. See endpoint [documentation](https://developers.google.com/youtube/v3/docs/videos/update)\n\n#### youtube#rate(id, rating, callback)\n\nAdd a like or dislike rating to a video or remove a rating from a video. See endpoint [documentation](https://developers.google.com/youtube/v3/docs/videos/rate)\n\n#### youtube#getRating(id, callback)\n\nRetrieves the ratings that the authorized user gave to a list of specified videos. \nSee endpoint [documentation](https://developers.google.com/youtube/v3/docs/videos/getRating)\n\n#### youtube#thumbnails(id, media, callback)\n\nUploads a custom video thumbnail to YouTube and set it for the given video ID.\nSee endpoint [documentation](https://developers.google.com/youtube/v3/docs/thumbnails/set)\n\n```js\nyoutube.thumbnails(videoId, { \n    mimeType: 'image/jpg', \n    body: fs.createReadStream('image.jpg') \n  }, function (err) {\n    if (err) console.error('Cannot define the thumbnail')\n  })\n```\n\n### youtube.google\n\nExpose the [node.js Google APIs](https://github.com/google/google-api-nodejs-client) module\n\n### youtube.youtube\n\nExpose the [node.js Google APIs](https://github.com/google/google-api-nodejs-client) YouTube API constructor\n\n### youtube.VERSION\n\nExpose the package current semantic version \n\n## Google OAuth\n\n### Automatically obtain a valid OAuth2 token\n\nBe sure you have a project and a Web Application credentials with a Client ID and Client Secret \nfrom the [Google API Console][console] > `API & Auth` > `Credentials`\n\nThen you must add the following URI as allowed redirects (without final slash):\n```\nhttp://localhost:8488\n```\n\nThen you should see something like:\n\n<img src=\"http://oi59.tinypic.com/2w3udmd.jpg\" />\n\nExample getting a valid OAuth token on-the-fly:\n```js\nvar youtube = Youtube({ \n  video: {\n    part: 'status,snippet'\n  },\n  email: 'john@gmail.com',\n  password: 'svp3r_p@s$p0rd'\n})\n\nyoutube.on('auth:success', function (err) {\n  if (!err) {\n    youtube.upload('path/to/video.mp4', {}, function (err, video) {\n      if (!err) console.log('Video was uploaded:', video.id)\n    })\n  }\n})\n\nyoutube.authenticate('my-client-id', 'my-client-secret')\n```\n\n## License\n\n[MIT](http://opensource.org/licenses/MIT) © Tomas Aparicio\n\n[console]: https://code.google.com/apis/console/\n[travis]: https://travis-ci.org/h2non/youtube-video-api\n[npm]: http://npmjs.org/package/youtube-video-api\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/h2non/youtube-video-api.git"
  },
  "scripts": {
    "test": "mocha --timeout 30000 --reporter spec --ui tdd"
  },
  "version": "0.3.7"
}
