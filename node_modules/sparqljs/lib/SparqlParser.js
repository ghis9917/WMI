/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var SparqlParser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[6,12,15,24,34,43,48,99,109,112,114,115,124,125,130,297,298,299,300,301],$V1=[2,195],$V2=[99,109,112,114,115,124,125,130,297,298,299,300,301],$V3=[1,18],$V4=[1,27],$V5=[6,83],$V6=[38,39,51],$V7=[38,51],$V8=[1,55],$V9=[1,57],$Va=[1,53],$Vb=[1,56],$Vc=[28,29,292],$Vd=[13,16,285],$Ve=[111,133,295,302],$Vf=[13,16,111,133,285],$Vg=[1,80],$Vh=[1,84],$Vi=[1,86],$Vj=[111,133,295,296,302],$Vk=[13,16,111,133,285,296],$Vl=[1,92],$Vm=[2,235],$Vn=[1,91],$Vo=[13,16,28,29,80,86,215,218,219,272,273,274,275,276,277,278,279,280,281,282,283,284,285],$Vp=[6,38,39,51,61,68,71,79,81,83],$Vq=[6,13,16,28,38,39,51,61,68,71,79,81,83,285],$Vr=[6,13,16,28,29,31,32,38,39,41,51,61,68,71,79,80,81,83,86,92,108,111,124,125,127,132,159,160,162,165,166,183,187,208,213,215,216,218,219,223,227,231,246,251,268,272,273,274,275,276,277,278,279,280,281,282,283,284,285,292,303,305,306,308,309,310,311,312,313,314,315],$Vs=[1,107],$Vt=[1,108],$Vu=[6,13,16,28,29,39,41,80,83,86,111,159,160,162,165,166,215,218,219,272,273,274,275,276,277,278,279,280,281,282,283,284,285,303],$Vv=[2,294],$Vw=[1,125],$Vx=[1,123],$Vy=[6,183],$Vz=[2,311],$VA=[2,299],$VB=[38,127],$VC=[6,41,68,71,79,81,83],$VD=[2,237],$VE=[1,139],$VF=[1,141],$VG=[1,151],$VH=[1,157],$VI=[1,160],$VJ=[1,156],$VK=[1,158],$VL=[1,154],$VM=[1,155],$VN=[1,161],$VO=[1,162],$VP=[1,165],$VQ=[1,166],$VR=[1,167],$VS=[1,168],$VT=[1,169],$VU=[1,170],$VV=[1,171],$VW=[1,172],$VX=[1,173],$VY=[1,174],$VZ=[1,175],$V_=[6,61,68,71,79,81,83],$V$=[28,29,38,39,51],$V01=[13,16,28,29,80,248,249,250,252,254,255,257,258,261,263,272,273,274,275,276,277,278,279,280,281,282,283,284,285,315,316,317,318,319,320],$V11=[2,408],$V21=[1,188],$V31=[1,189],$V41=[1,190],$V51=[13,16,41,80,92,272,273,274,275,276,277,278,279,280,281,282,283,284,285],$V61=[41,86],$V71=[28,32],$V81=[6,108,183],$V91=[41,111],$Va1=[6,41,71,79,81,83],$Vb1=[2,323],$Vc1=[2,315],$Vd1=[1,225],$Ve1=[1,227],$Vf1=[41,111,303],$Vg1=[13,16,28,29,32,39,41,80,83,86,111,159,160,162,165,166,183,187,208,213,215,216,218,219,251,272,273,274,275,276,277,278,279,280,281,282,283,284,285,303],$Vh1=[13,16,28,29,31,32,39,41,80,83,86,92,111,159,160,162,165,166,183,187,208,213,215,216,218,219,223,227,231,246,251,268,272,273,274,275,276,277,278,279,280,281,282,283,284,285,292,303,306,309,310,311,312,313,314,315],$Vi1=[13,16,28,29,31,32,39,41,80,83,86,92,111,159,160,162,165,166,183,187,208,213,215,216,218,219,223,227,231,246,251,268,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,292,303,306,309,310,311,312,313,314,315],$Vj1=[31,32,183,223,251],$Vk1=[31,32,183,223,227,251],$Vl1=[31,32,183,223,227,231,246,251,268,279,280,281,282,283,284,309,310,311,312,313,314,315],$Vm1=[31,32,183,223,227,231,246,251,268,279,280,281,282,283,284,292,306,309,310,311,312,313,314,315],$Vn1=[1,259],$Vo1=[1,260],$Vp1=[1,262],$Vq1=[1,263],$Vr1=[1,264],$Vs1=[1,265],$Vt1=[1,267],$Vu1=[1,268],$Vv1=[2,415],$Vw1=[1,270],$Vx1=[1,271],$Vy1=[1,272],$Vz1=[1,278],$VA1=[1,273],$VB1=[1,274],$VC1=[1,275],$VD1=[1,276],$VE1=[1,277],$VF1=[1,285],$VG1=[1,298],$VH1=[6,41,79,81,83],$VI1=[1,315],$VJ1=[1,314],$VK1=[39,41,83,111,159,160,162,165,166],$VL1=[1,323],$VM1=[1,324],$VN1=[41,111,183,216,303],$VO1=[2,353],$VP1=[13,16,28,29,32,80,86,215,218,219,272,273,274,275,276,277,278,279,280,281,282,283,284,285],$VQ1=[13,16,28,29,32,39,41,80,83,86,111,159,160,162,165,166,183,215,216,218,219,251,272,273,274,275,276,277,278,279,280,281,282,283,284,285,303],$VR1=[13,16,28,29,80,208,246,248,249,250,252,254,255,257,258,261,263,272,273,274,275,276,277,278,279,280,281,282,283,284,285,309,315,316,317,318,319,320],$VS1=[1,348],$VT1=[1,349],$VU1=[1,351],$VV1=[1,350],$VW1=[6,13,16,28,29,31,32,39,41,68,71,74,76,79,80,81,83,86,111,159,160,162,165,166,183,215,218,219,223,227,231,246,248,249,250,251,252,254,255,257,258,261,263,268,272,273,274,275,276,277,278,279,280,281,282,283,284,285,292,303,306,309,310,311,312,313,314,315,316,317,318,319,320],$VX1=[1,359],$VY1=[1,358],$VZ1=[29,86],$V_1=[13,16,32,41,80,92,272,273,274,275,276,277,278,279,280,281,282,283,284,285],$V$1=[29,41],$V02=[2,314],$V12=[6,41,83],$V22=[6,13,16,29,41,71,79,81,83,248,249,250,252,254,255,257,258,261,263,285,315,316,317,318,319,320],$V32=[6,13,16,28,29,39,41,71,74,76,79,80,81,83,86,111,159,160,162,165,166,215,218,219,248,249,250,252,254,255,257,258,261,263,272,273,274,275,276,277,278,279,280,281,282,283,284,285,303,315,316,317,318,319,320],$V42=[6,13,16,28,29,41,68,71,79,81,83,248,249,250,252,254,255,257,258,261,263,285,315,316,317,318,319,320],$V52=[6,13,16,28,29,31,32,39,41,61,68,71,74,76,79,80,81,83,86,111,159,160,162,165,166,183,215,218,219,223,227,231,246,248,249,250,251,252,254,255,257,258,261,263,268,272,273,274,275,276,277,278,279,280,281,282,283,284,285,292,303,304,306,309,310,311,312,313,314,315,316,317,318,319,320],$V62=[13,16,29,187,208,213,285],$V72=[2,365],$V82=[1,400],$V92=[39,41,83,111,159,160,162,165,166,303],$Va2=[13,16,28,29,32,39,41,80,83,86,111,159,160,162,165,166,183,187,215,216,218,219,251,272,273,274,275,276,277,278,279,280,281,282,283,284,285,303],$Vb2=[13,16,28,29,80,208,246,248,249,250,252,254,255,257,258,261,263,272,273,274,275,276,277,278,279,280,281,282,283,284,285,292,309,315,316,317,318,319,320],$Vc2=[1,449],$Vd2=[1,446],$Ve2=[1,447],$Vf2=[13,16,28,29,39,41,80,83,86,111,159,160,162,165,166,215,218,219,272,273,274,275,276,277,278,279,280,281,282,283,284,285],$Vg2=[13,16,28,285],$Vh2=[13,16,28,29,39,41,80,83,86,111,159,160,162,165,166,215,218,219,272,273,274,275,276,277,278,279,280,281,282,283,284,285,303],$Vi2=[2,326],$Vj2=[39,41,83,111,159,160,162,165,166,183,216,303],$Vk2=[6,13,16,28,29,41,74,76,79,81,83,248,249,250,252,254,255,257,258,261,263,285,315,316,317,318,319,320],$Vl2=[2,321],$Vm2=[13,16,29,187,208,285],$Vn2=[13,16,32,80,92,272,273,274,275,276,277,278,279,280,281,282,283,284,285],$Vo2=[13,16,28,29,41,80,86,111,215,218,219,272,273,274,275,276,277,278,279,280,281,282,283,284,285],$Vp2=[13,16,28,29,32,80,86,215,218,219,272,273,274,275,276,277,278,279,280,281,282,283,284,285,305,306],$Vq2=[13,16,28,29,32,80,86,215,218,219,272,273,274,275,276,277,278,279,280,281,282,283,284,285,292,305,306,308,309],$Vr2=[1,560],$Vs2=[1,561],$Vt2=[2,309],$Vu2=[13,16,32,187,213,285];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"QueryOrUpdate":3,"Prologue":4,"QueryOrUpdate_group0":5,"EOF":6,"Prologue_repetition0":7,"Query":8,"Query_group0":9,"Query_option0":10,"BaseDecl":11,"BASE":12,"IRIREF":13,"PrefixDecl":14,"PREFIX":15,"PNAME_NS":16,"SelectQuery":17,"SelectClause":18,"SelectQuery_repetition0":19,"WhereClause":20,"SolutionModifier":21,"SubSelect":22,"SubSelect_option0":23,"SELECT":24,"SelectClause_option0":25,"SelectClause_group0":26,"SelectClauseItem":27,"VAR":28,"(":29,"Expression":30,"AS":31,")":32,"ConstructQuery":33,"CONSTRUCT":34,"ConstructTemplate":35,"ConstructQuery_repetition0":36,"ConstructQuery_repetition1":37,"WHERE":38,"{":39,"ConstructQuery_option0":40,"}":41,"DescribeQuery":42,"DESCRIBE":43,"DescribeQuery_group0":44,"DescribeQuery_repetition0":45,"DescribeQuery_option0":46,"AskQuery":47,"ASK":48,"AskQuery_repetition0":49,"DatasetClause":50,"FROM":51,"DatasetClause_option0":52,"iri":53,"WhereClause_option0":54,"GroupGraphPattern":55,"SolutionModifier_option0":56,"SolutionModifier_option1":57,"SolutionModifier_option2":58,"SolutionModifier_option3":59,"GroupClause":60,"GROUP":61,"BY":62,"GroupClause_repetition_plus0":63,"GroupCondition":64,"BuiltInCall":65,"FunctionCall":66,"HavingClause":67,"HAVING":68,"HavingClause_repetition_plus0":69,"OrderClause":70,"ORDER":71,"OrderClause_repetition_plus0":72,"OrderCondition":73,"ASC":74,"BrackettedExpression":75,"DESC":76,"Constraint":77,"LimitOffsetClauses":78,"LIMIT":79,"INTEGER":80,"OFFSET":81,"ValuesClause":82,"VALUES":83,"InlineData":84,"InlineData_repetition0":85,"NIL":86,"InlineData_repetition1":87,"InlineData_repetition_plus2":88,"InlineData_repetition3":89,"DataBlockValue":90,"Literal":91,"UNDEF":92,"DataBlockValueList":93,"DataBlockValueList_repetition_plus0":94,"Update":95,"Update_repetition0":96,"Update1":97,"Update_option0":98,"LOAD":99,"Update1_option0":100,"Update1_option1":101,"Update1_group0":102,"Update1_option2":103,"GraphRefAll":104,"Update1_group1":105,"Update1_option3":106,"GraphOrDefault":107,"TO":108,"CREATE":109,"Update1_option4":110,"GRAPH":111,"INSERTDATA":112,"QuadPattern":113,"DELETEDATA":114,"DELETEWHERE":115,"Update1_option5":116,"InsertClause":117,"Update1_option6":118,"Update1_repetition0":119,"Update1_option7":120,"DeleteClause":121,"Update1_option8":122,"Update1_repetition1":123,"DELETE":124,"INSERT":125,"UsingClause":126,"USING":127,"UsingClause_option0":128,"WithClause":129,"WITH":130,"IntoGraphClause":131,"INTO":132,"DEFAULT":133,"GraphOrDefault_option0":134,"GraphRefAll_group0":135,"QuadPattern_option0":136,"QuadPattern_repetition0":137,"QuadsNotTriples":138,"QuadsNotTriples_group0":139,"QuadsNotTriples_option0":140,"QuadsNotTriples_option1":141,"QuadsNotTriples_option2":142,"TriplesTemplate":143,"TriplesTemplate_repetition0":144,"TriplesSameSubject":145,"TriplesTemplate_option0":146,"GroupGraphPatternSub":147,"GroupGraphPatternSub_option0":148,"GroupGraphPatternSub_repetition0":149,"GroupGraphPatternSubTail":150,"GraphPatternNotTriples":151,"GroupGraphPatternSubTail_option0":152,"GroupGraphPatternSubTail_option1":153,"TriplesBlock":154,"TriplesBlock_repetition0":155,"TriplesSameSubjectPath":156,"TriplesBlock_option0":157,"GraphPatternNotTriples_repetition0":158,"OPTIONAL":159,"MINUS":160,"GraphPatternNotTriples_group0":161,"SERVICE":162,"GraphPatternNotTriples_option0":163,"GraphPatternNotTriples_group1":164,"FILTER":165,"BIND":166,"FunctionCall_option0":167,"FunctionCall_repetition0":168,"ExpressionList":169,"ExpressionList_repetition0":170,"ConstructTemplate_option0":171,"ConstructTriples":172,"ConstructTriples_repetition0":173,"ConstructTriples_option0":174,"VarOrTerm":175,"PropertyListNotEmpty":176,"TriplesNode":177,"PropertyList":178,"PropertyList_option0":179,"VerbObjectList":180,"PropertyListNotEmpty_repetition0":181,"SemiOptionalVerbObjectList":182,";":183,"SemiOptionalVerbObjectList_option0":184,"Verb":185,"ObjectList":186,"a":187,"ObjectList_repetition0":188,"GraphNode":189,"PropertyListPathNotEmpty":190,"TriplesNodePath":191,"TriplesSameSubjectPath_option0":192,"PropertyListPathNotEmpty_group0":193,"PropertyListPathNotEmpty_repetition0":194,"GraphNodePath":195,"PropertyListPathNotEmpty_repetition1":196,"PropertyListPathNotEmptyTail":197,"PropertyListPathNotEmptyTail_group0":198,"Path":199,"Path_repetition0":200,"PathSequence":201,"PathSequence_repetition0":202,"PathEltOrInverse":203,"PathElt":204,"PathPrimary":205,"PathElt_option0":206,"PathEltOrInverse_option0":207,"!":208,"PathNegatedPropertySet":209,"PathOneInPropertySet":210,"PathNegatedPropertySet_repetition0":211,"PathNegatedPropertySet_option0":212,"^":213,"TriplesNode_repetition_plus0":214,"[":215,"]":216,"TriplesNodePath_repetition_plus0":217,"BLANK_NODE_LABEL":218,"ANON":219,"ConditionalAndExpression":220,"Expression_repetition0":221,"ExpressionTail":222,"||":223,"RelationalExpression":224,"ConditionalAndExpression_repetition0":225,"ConditionalAndExpressionTail":226,"&&":227,"AdditiveExpression":228,"RelationalExpression_group0":229,"RelationalExpression_option0":230,"IN":231,"MultiplicativeExpression":232,"AdditiveExpression_repetition0":233,"AdditiveExpressionTail":234,"AdditiveExpressionTail_group0":235,"NumericLiteralPositive":236,"AdditiveExpressionTail_repetition0":237,"NumericLiteralNegative":238,"AdditiveExpressionTail_repetition1":239,"UnaryExpression":240,"MultiplicativeExpression_repetition0":241,"MultiplicativeExpressionTail":242,"MultiplicativeExpressionTail_group0":243,"UnaryExpression_option0":244,"PrimaryExpression":245,"-":246,"Aggregate":247,"FUNC_ARITY0":248,"FUNC_ARITY1":249,"FUNC_ARITY2":250,",":251,"IF":252,"BuiltInCall_group0":253,"BOUND":254,"BNODE":255,"BuiltInCall_option0":256,"EXISTS":257,"COUNT":258,"Aggregate_option0":259,"Aggregate_group0":260,"FUNC_AGGREGATE":261,"Aggregate_option1":262,"GROUP_CONCAT":263,"Aggregate_option2":264,"Aggregate_option3":265,"GroupConcatSeparator":266,"SEPARATOR":267,"=":268,"String":269,"LANGTAG":270,"^^":271,"DECIMAL":272,"DOUBLE":273,"BOOLEAN":274,"STRING_LITERAL1":275,"STRING_LITERAL2":276,"STRING_LITERAL_LONG1":277,"STRING_LITERAL_LONG2":278,"INTEGER_POSITIVE":279,"DECIMAL_POSITIVE":280,"DOUBLE_POSITIVE":281,"INTEGER_NEGATIVE":282,"DECIMAL_NEGATIVE":283,"DOUBLE_NEGATIVE":284,"PNAME_LN":285,"QueryOrUpdate_group0_option0":286,"Prologue_repetition0_group0":287,"SelectClause_option0_group0":288,"DISTINCT":289,"REDUCED":290,"SelectClause_group0_repetition_plus0":291,"*":292,"DescribeQuery_group0_repetition_plus0_group0":293,"DescribeQuery_group0_repetition_plus0":294,"NAMED":295,"SILENT":296,"CLEAR":297,"DROP":298,"ADD":299,"MOVE":300,"COPY":301,"ALL":302,".":303,"UNION":304,"|":305,"/":306,"PathElt_option0_group0":307,"?":308,"+":309,"!=":310,"<":311,">":312,"<=":313,">=":314,"NOT":315,"CONCAT":316,"COALESCE":317,"SUBSTR":318,"REGEX":319,"REPLACE":320,"$accept":0,"$end":1},
terminals_: {2:"error",6:"EOF",12:"BASE",13:"IRIREF",15:"PREFIX",16:"PNAME_NS",24:"SELECT",28:"VAR",29:"(",31:"AS",32:")",34:"CONSTRUCT",38:"WHERE",39:"{",41:"}",43:"DESCRIBE",48:"ASK",51:"FROM",61:"GROUP",62:"BY",68:"HAVING",71:"ORDER",74:"ASC",76:"DESC",79:"LIMIT",80:"INTEGER",81:"OFFSET",83:"VALUES",86:"NIL",92:"UNDEF",99:"LOAD",108:"TO",109:"CREATE",111:"GRAPH",112:"INSERTDATA",114:"DELETEDATA",115:"DELETEWHERE",124:"DELETE",125:"INSERT",127:"USING",130:"WITH",132:"INTO",133:"DEFAULT",159:"OPTIONAL",160:"MINUS",162:"SERVICE",165:"FILTER",166:"BIND",183:";",187:"a",208:"!",213:"^",215:"[",216:"]",218:"BLANK_NODE_LABEL",219:"ANON",223:"||",227:"&&",231:"IN",246:"-",248:"FUNC_ARITY0",249:"FUNC_ARITY1",250:"FUNC_ARITY2",251:",",252:"IF",254:"BOUND",255:"BNODE",257:"EXISTS",258:"COUNT",261:"FUNC_AGGREGATE",263:"GROUP_CONCAT",267:"SEPARATOR",268:"=",270:"LANGTAG",271:"^^",272:"DECIMAL",273:"DOUBLE",274:"BOOLEAN",275:"STRING_LITERAL1",276:"STRING_LITERAL2",277:"STRING_LITERAL_LONG1",278:"STRING_LITERAL_LONG2",279:"INTEGER_POSITIVE",280:"DECIMAL_POSITIVE",281:"DOUBLE_POSITIVE",282:"INTEGER_NEGATIVE",283:"DECIMAL_NEGATIVE",284:"DOUBLE_NEGATIVE",285:"PNAME_LN",289:"DISTINCT",290:"REDUCED",292:"*",295:"NAMED",296:"SILENT",297:"CLEAR",298:"DROP",299:"ADD",300:"MOVE",301:"COPY",302:"ALL",303:".",304:"UNION",305:"|",306:"/",308:"?",309:"+",310:"!=",311:"<",312:">",313:"<=",314:">=",315:"NOT",316:"CONCAT",317:"COALESCE",318:"SUBSTR",319:"REGEX",320:"REPLACE"},
productions_: [0,[3,3],[4,1],[8,2],[11,2],[14,3],[17,4],[22,4],[18,3],[27,1],[27,5],[33,5],[33,7],[42,5],[47,4],[50,3],[20,2],[21,4],[60,3],[64,1],[64,1],[64,3],[64,5],[64,1],[67,2],[70,3],[73,2],[73,2],[73,1],[73,1],[78,2],[78,2],[78,4],[78,4],[82,2],[84,4],[84,4],[84,6],[90,1],[90,1],[90,1],[93,3],[95,3],[97,4],[97,3],[97,5],[97,4],[97,2],[97,2],[97,2],[97,6],[97,6],[121,2],[117,2],[126,3],[129,2],[131,3],[107,1],[107,2],[104,2],[104,1],[113,4],[138,7],[143,3],[55,3],[55,3],[147,2],[150,3],[154,3],[151,2],[151,2],[151,2],[151,3],[151,4],[151,2],[151,6],[151,1],[77,1],[77,1],[77,1],[66,2],[66,6],[169,1],[169,4],[35,3],[172,3],[145,2],[145,2],[178,1],[176,2],[182,2],[180,2],[185,1],[185,1],[185,1],[186,2],[156,2],[156,2],[190,4],[197,1],[197,3],[199,2],[201,2],[204,2],[203,2],[205,1],[205,1],[205,2],[205,3],[209,1],[209,1],[209,4],[210,1],[210,1],[210,2],[210,2],[177,3],[177,3],[191,3],[191,3],[189,1],[189,1],[195,1],[195,1],[175,1],[175,1],[175,1],[175,1],[175,1],[175,1],[30,2],[222,2],[220,2],[226,2],[224,1],[224,3],[224,4],[228,2],[234,2],[234,2],[234,2],[232,2],[242,2],[240,2],[240,2],[240,2],[245,1],[245,1],[245,1],[245,1],[245,1],[245,1],[75,3],[65,1],[65,2],[65,4],[65,6],[65,8],[65,2],[65,4],[65,2],[65,4],[65,3],[247,5],[247,5],[247,6],[266,4],[91,1],[91,2],[91,3],[91,1],[91,1],[91,1],[91,1],[91,1],[91,1],[269,1],[269,1],[269,1],[269,1],[236,1],[236,1],[236,1],[238,1],[238,1],[238,1],[53,1],[53,1],[53,1],[286,0],[286,1],[5,1],[5,1],[287,1],[287,1],[7,0],[7,2],[9,1],[9,1],[9,1],[9,1],[10,0],[10,1],[19,0],[19,2],[23,0],[23,1],[288,1],[288,1],[25,0],[25,1],[291,1],[291,2],[26,1],[26,1],[36,0],[36,2],[37,0],[37,2],[40,0],[40,1],[293,1],[293,1],[294,1],[294,2],[44,1],[44,1],[45,0],[45,2],[46,0],[46,1],[49,0],[49,2],[52,0],[52,1],[54,0],[54,1],[56,0],[56,1],[57,0],[57,1],[58,0],[58,1],[59,0],[59,1],[63,1],[63,2],[69,1],[69,2],[72,1],[72,2],[85,0],[85,2],[87,0],[87,2],[88,1],[88,2],[89,0],[89,2],[94,1],[94,2],[96,0],[96,4],[98,0],[98,2],[100,0],[100,1],[101,0],[101,1],[102,1],[102,1],[103,0],[103,1],[105,1],[105,1],[105,1],[106,0],[106,1],[110,0],[110,1],[116,0],[116,1],[118,0],[118,1],[119,0],[119,2],[120,0],[120,1],[122,0],[122,1],[123,0],[123,2],[128,0],[128,1],[134,0],[134,1],[135,1],[135,1],[135,1],[136,0],[136,1],[137,0],[137,2],[139,1],[139,1],[140,0],[140,1],[141,0],[141,1],[142,0],[142,1],[144,0],[144,3],[146,0],[146,1],[148,0],[148,1],[149,0],[149,2],[152,0],[152,1],[153,0],[153,1],[155,0],[155,3],[157,0],[157,1],[158,0],[158,3],[161,1],[161,1],[163,0],[163,1],[164,1],[164,1],[167,0],[167,1],[168,0],[168,3],[170,0],[170,3],[171,0],[171,1],[173,0],[173,3],[174,0],[174,1],[179,0],[179,1],[181,0],[181,2],[184,0],[184,1],[188,0],[188,3],[192,0],[192,1],[193,1],[193,1],[194,0],[194,3],[196,0],[196,2],[198,1],[198,1],[200,0],[200,3],[202,0],[202,3],[307,1],[307,1],[307,1],[206,0],[206,1],[207,0],[207,1],[211,0],[211,3],[212,0],[212,1],[214,1],[214,2],[217,1],[217,2],[221,0],[221,2],[225,0],[225,2],[229,1],[229,1],[229,1],[229,1],[229,1],[229,1],[230,0],[230,1],[233,0],[233,2],[235,1],[235,1],[237,0],[237,2],[239,0],[239,2],[241,0],[241,2],[243,1],[243,1],[244,0],[244,1],[253,1],[253,1],[253,1],[253,1],[253,1],[256,0],[256,1],[259,0],[259,1],[260,1],[260,1],[262,0],[262,1],[264,0],[264,1],[265,0],[265,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

      $$[$0-1] = $$[$0-1] || {};
      if (Parser.base)
        $$[$0-1].base = Parser.base;
      Parser.base = base = basePath = baseRoot = '';
      $$[$0-1].prefixes = Parser.prefixes;
      Parser.prefixes = null;
      return $$[$0-1];
    
break;
case 3:
this.$ = extend($$[$0-1], $$[$0], { type: 'query' });
break;
case 4:

      Parser.base = resolveIRI($$[$0])
      base = basePath = baseRoot = '';
    
break;
case 5:

      if (!Parser.prefixes) Parser.prefixes = {};
      $$[$0-1] = $$[$0-1].substr(0, $$[$0-1].length - 1);
      $$[$0] = resolveIRI($$[$0]);
      Parser.prefixes[$$[$0-1]] = $$[$0];
    
break;
case 6:
this.$ = extend($$[$0-3], groupDatasets($$[$0-2]), $$[$0-1], $$[$0]);
break;
case 7:
this.$ = extend($$[$0-3], $$[$0-2], $$[$0-1], $$[$0], { type: 'query' });
break;
case 8:
this.$ = extend({ queryType: 'SELECT', variables: $$[$0] === '*' ? [new Wildcard()] : $$[$0] }, $$[$0-1] && ($$[$0-2] = lowercase($$[$0-1]), $$[$0-1] = {}, $$[$0-1][$$[$0-2]] = true, $$[$0-1]));
break;
case 9: case 92: case 124: case 151:
this.$ = toVar($$[$0]);
break;
case 10: case 22:
this.$ = expression($$[$0-3], { variable: toVar($$[$0-1]) });
break;
case 11:
this.$ = extend({ queryType: 'CONSTRUCT', template: $$[$0-3] }, groupDatasets($$[$0-2]), $$[$0-1], $$[$0]);
break;
case 12:
this.$ = extend({ queryType: 'CONSTRUCT', template: $$[$0-2] = ($$[$0-2] ? $$[$0-2].triples : []) }, groupDatasets($$[$0-5]), { where: [ { type: 'bgp', triples: appendAllTo([], $$[$0-2]) } ] }, $$[$0]);
break;
case 13:
this.$ = extend({ queryType: 'DESCRIBE', variables: $$[$0-3] === '*' ? [new Wildcard()] : $$[$0-3].map(toVar) }, groupDatasets($$[$0-2]), $$[$0-1], $$[$0]);
break;
case 14:
this.$ = extend({ queryType: 'ASK' }, groupDatasets($$[$0-2]), $$[$0-1], $$[$0]);
break;
case 15: case 54:
this.$ = { iri: $$[$0], named: !!$$[$0-1] };
break;
case 16:
this.$ = { where: $$[$0].patterns };
break;
case 17:
this.$ = extend($$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
break;
case 18:
this.$ = { group: $$[$0] };
break;
case 19: case 20: case 26: case 28:
this.$ = expression($$[$0]);
break;
case 21:
this.$ = expression($$[$0-1]);
break;
case 23: case 29:
this.$ = expression(toVar($$[$0]));
break;
case 24:
this.$ = { having: $$[$0] };
break;
case 25:
this.$ = { order: $$[$0] };
break;
case 27:
this.$ = expression($$[$0], { descending: true });
break;
case 30:
this.$ = { limit:  toInt($$[$0]) };
break;
case 31:
this.$ = { offset: toInt($$[$0]) };
break;
case 32:
this.$ = { limit: toInt($$[$0-2]), offset: toInt($$[$0]) };
break;
case 33:
this.$ = { limit: toInt($$[$0]), offset: toInt($$[$0-2]) };
break;
case 34:
this.$ = { type: 'values', values: $$[$0] };
break;
case 35:

      this.$ = $$[$0-1].map(function(v) { var o = {}; o[$$[$0-3]] = v; return o; })
    
break;
case 36:

      this.$ = $$[$0-1].map(function() { return {}; })
    
break;
case 37:

      var length = $$[$0-4].length;
      $$[$0-4] = $$[$0-4].map(toVar);
      this.$ = $$[$0-1].map(function (values) {
        if (values.length !== length)
          throw Error('Inconsistent VALUES length');
        var valuesObject = {};
        for(var i = 0; i<length; i++)
          valuesObject['?' + $$[$0-4][i].value] = values[i];
        return valuesObject;
      });
    
break;
case 40:
this.$ = undefined;
break;
case 41: case 84: case 108: case 152:
this.$ = $$[$0-1];
break;
case 42:
this.$ = { type: 'update', updates: appendTo($$[$0-2], $$[$0-1]) };
break;
case 43:
this.$ = extend({ type: 'load', silent: !!$$[$0-2], source: $$[$0-1] }, $$[$0] && { destination: $$[$0] });
break;
case 44:
this.$ = { type: lowercase($$[$0-2]), silent: !!$$[$0-1], graph: $$[$0] };
break;
case 45:
this.$ = { type: lowercase($$[$0-4]), silent: !!$$[$0-3], source: $$[$0-2], destination: $$[$0] };
break;
case 46:
this.$ = { type: 'create', silent: !!$$[$0-2], graph: { type: 'graph', name: $$[$0] } };
break;
case 47:
this.$ = { updateType: 'insert',      insert: $$[$0] };
break;
case 48:
this.$ = { updateType: 'delete',      delete: $$[$0] };
break;
case 49:
this.$ = { updateType: 'deletewhere', delete: $$[$0] };
break;
case 50:
this.$ = extend({ updateType: 'insertdelete' }, $$[$0-5], { insert: $$[$0-4] || [] }, { delete: $$[$0-3] || [] }, groupDatasets($$[$0-2]), { where: $$[$0].patterns });
break;
case 51:
this.$ = extend({ updateType: 'insertdelete' }, $$[$0-5], { delete: $$[$0-4] || [] }, { insert: $$[$0-3] || [] }, groupDatasets($$[$0-2]), { where: $$[$0].patterns });
break;
case 52: case 53: case 56: case 143: case 166:
this.$ = $$[$0];
break;
case 55:
this.$ = { graph: $$[$0] };
break;
case 57:
this.$ = { type: 'graph', default: true };
break;
case 58: case 59:
this.$ = { type: 'graph', name: $$[$0] };
break;
case 60:
 this.$ = {}; this.$[lowercase($$[$0])] = true; 
break;
case 61:
this.$ = $$[$0-2] ? unionAll($$[$0-1], [$$[$0-2]]) : unionAll($$[$0-1]);
break;
case 62:

      var graph = extend($$[$0-3] || { triples: [] }, { type: 'graph', name: toVar($$[$0-5]) });
      this.$ = $$[$0] ? [graph, $$[$0]] : [graph];
    
break;
case 63: case 68:
this.$ = { type: 'bgp', triples: unionAll($$[$0-2], [$$[$0-1]]) };
break;
case 64:
this.$ = { type: 'group', patterns: [ $$[$0-1] ] };
break;
case 65:
this.$ = { type: 'group', patterns: $$[$0-1] };
break;
case 66:
this.$ = $$[$0-1] ? unionAll([$$[$0-1]], $$[$0]) : unionAll($$[$0]);
break;
case 67:
this.$ = $$[$0] ? [$$[$0-2], $$[$0]] : $$[$0-2];
break;
case 69:

      if ($$[$0-1].length)
        this.$ = { type: 'union', patterns: unionAll($$[$0-1].map(degroupSingle), [degroupSingle($$[$0])]) };
      else
        this.$ = $$[$0];
    
break;
case 70:
this.$ = extend($$[$0], { type: 'optional' });
break;
case 71:
this.$ = extend($$[$0], { type: 'minus' });
break;
case 72:
this.$ = extend($$[$0], { type: 'graph', name: toVar($$[$0-1]) });
break;
case 73:
this.$ = extend($$[$0], { type: 'service', name: toVar($$[$0-1]), silent: !!$$[$0-2] });
break;
case 74:
this.$ = { type: 'filter', expression: $$[$0] };
break;
case 75:
this.$ = { type: 'bind', variable: toVar($$[$0-1]), expression: $$[$0-3] };
break;
case 80:
this.$ = { type: 'functionCall', function: $$[$0-1], args: [] };
break;
case 81:
this.$ = { type: 'functionCall', function: $$[$0-5], args: appendTo($$[$0-2], $$[$0-1]), distinct: !!$$[$0-3] };
break;
case 82: case 99: case 110: case 195: case 203: case 215: case 217: case 227: case 231: case 251: case 253: case 257: case 261: case 284: case 290: case 301: case 311: case 317: case 323: case 327: case 337: case 339: case 343: case 349: case 353: case 359: case 361: case 365: case 367: case 376: case 384: case 386: case 396: case 400: case 402: case 404:
this.$ = [];
break;
case 83:
this.$ = appendTo($$[$0-2], $$[$0-1]);
break;
case 85:
this.$ = unionAll($$[$0-2], [$$[$0-1]]);
break;
case 86: case 96:
this.$ = $$[$0].map(function (t) { return extend(triple($$[$0-1]), t); });
break;
case 87:
this.$ = appendAllTo($$[$0].map(function (t) { return extend(triple($$[$0-1].entity), t); }), $$[$0-1].triples) /* the subject is a blank node, possibly with more triples */;
break;
case 89:
this.$ = unionAll([$$[$0-1]], $$[$0]);
break;
case 90:
this.$ = unionAll($$[$0]);
break;
case 91:
this.$ = objectListToTriples($$[$0-1], $$[$0]);
break;
case 94: case 106: case 113:
this.$ = Parser.factory.namedNode(RDF_TYPE);
break;
case 95:
this.$ = appendTo($$[$0-1], $$[$0]);
break;
case 97:
this.$ = !$$[$0] ? $$[$0-1].triples : appendAllTo($$[$0].map(function (t) { return extend(triple($$[$0-1].entity), t); }), $$[$0-1].triples) /* the subject is a blank node, possibly with more triples */;
break;
case 98:
this.$ = objectListToTriples(toVar($$[$0-3]), appendTo($$[$0-2], $$[$0-1]), $$[$0]);
break;
case 100:
this.$ = objectListToTriples(toVar($$[$0-1]), $$[$0]);
break;
case 101:
this.$ = $$[$0-1].length ? path('|',appendTo($$[$0-1], $$[$0])) : $$[$0];
break;
case 102:
this.$ = $$[$0-1].length ? path('/', appendTo($$[$0-1], $$[$0])) : $$[$0];
break;
case 103:
this.$ = $$[$0] ? path($$[$0], [$$[$0-1]]) : $$[$0-1];
break;
case 104:
this.$ = $$[$0-1] ? path($$[$0-1], [$$[$0]]) : $$[$0];;
break;
case 107: case 114:
this.$ = path($$[$0-1], [$$[$0]]);
break;
case 111:
this.$ = path('|', appendTo($$[$0-2], $$[$0-1]));
break;
case 115:
this.$ = path($$[$0-1], [Parser.factory.namedNode(RDF_TYPE)]);
break;
case 116: case 118:
this.$ = createList($$[$0-1]);
break;
case 117: case 119:
this.$ = createAnonymousObject($$[$0-1]);
break;
case 120:
this.$ = { entity: $$[$0], triples: [] } /* for consistency with TriplesNode */;
break;
case 122:
this.$ = { entity: $$[$0], triples: [] } /* for consistency with TriplesNodePath */;
break;
case 127:
this.$ = blank($$[$0].replace(/^(_:)/,''));;
break;
case 128:
this.$ = blank();
break;
case 129:
this.$ = Parser.factory.namedNode(RDF_NIL);
break;
case 130: case 132: case 137: case 141:
this.$ = createOperationTree($$[$0-1], $$[$0]);
break;
case 131:
this.$ = ['||', $$[$0]];
break;
case 133:
this.$ = ['&&', $$[$0]];
break;
case 135:
this.$ = operation($$[$0-1], [$$[$0-2], $$[$0]]);
break;
case 136:
this.$ = operation($$[$0-2] ? 'notin' : 'in', [$$[$0-3], $$[$0]]);
break;
case 138: case 142:
this.$ = [$$[$0-1], $$[$0]];
break;
case 139:
this.$ = ['+', createOperationTree($$[$0-1], $$[$0])];
break;
case 140:
this.$ = ['-', createOperationTree($$[$0-1].replace('-', ''), $$[$0])];
break;
case 144:
this.$ = operation($$[$0-1], [$$[$0]]);
break;
case 145:
this.$ = operation('UMINUS', [$$[$0]]);
break;
case 154:
this.$ = operation(lowercase($$[$0-1]));
break;
case 155:
this.$ = operation(lowercase($$[$0-3]), [$$[$0-1]]);
break;
case 156:
this.$ = operation(lowercase($$[$0-5]), [$$[$0-3], $$[$0-1]]);
break;
case 157:
this.$ = operation(lowercase($$[$0-7]), [$$[$0-5], $$[$0-3], $$[$0-1]]);
break;
case 158:
this.$ = operation(lowercase($$[$0-1]), $$[$0]);
break;
case 159:
this.$ = operation('bound', [toVar($$[$0-1])]);
break;
case 160:
this.$ = operation($$[$0-1], []);
break;
case 161:
this.$ = operation($$[$0-3], [$$[$0-1]]);
break;
case 162:
this.$ = operation($$[$0-2] ? 'notexists' :'exists', [degroupSingle($$[$0])]);
break;
case 163: case 164:
this.$ = expression($$[$0-1], { type: 'aggregate', aggregation: lowercase($$[$0-4]), distinct: !!$$[$0-2] });
break;
case 165:
this.$ = expression($$[$0-2], { type: 'aggregate', aggregation: lowercase($$[$0-5]), distinct: !!$$[$0-3], separator: $$[$0-1] || ' ' });
break;
case 167:
this.$ = createTypedLiteral($$[$0]);
break;
case 168:
this.$ = createLangLiteral($$[$0-1], lowercase($$[$0].substr(1)));
break;
case 169:
this.$ = createTypedLiteral($$[$0-2], $$[$0]);
break;
case 170: case 183:
this.$ = createTypedLiteral($$[$0], XSD_INTEGER);
break;
case 171: case 184:
this.$ = createTypedLiteral($$[$0], XSD_DECIMAL);
break;
case 172: case 185:
this.$ = createTypedLiteral(lowercase($$[$0]), XSD_DOUBLE);
break;
case 175:
this.$ = createTypedLiteral($$[$0], XSD_BOOLEAN);
break;
case 176: case 177:
this.$ = unescapeString($$[$0], 1);
break;
case 178: case 179:
this.$ = unescapeString($$[$0], 3);
break;
case 180:
this.$ = createTypedLiteral($$[$0].substr(1), XSD_INTEGER);
break;
case 181:
this.$ = createTypedLiteral($$[$0].substr(1), XSD_DECIMAL);
break;
case 182:
this.$ = createTypedLiteral($$[$0].substr(1).toLowerCase(), XSD_DOUBLE);
break;
case 186:
this.$ = Parser.factory.namedNode(resolveIRI($$[$0]));
break;
case 187:

      var namePos = $$[$0].indexOf(':'),
          prefix = $$[$0].substr(0, namePos),
          expansion = Parser.prefixes[prefix];
      if (!expansion) throw new Error('Unknown prefix: ' + prefix);
      var uriString = resolveIRI(expansion + $$[$0].substr(namePos + 1));
      this.$ = Parser.factory.namedNode(uriString);
    
break;
case 188:

      $$[$0] = $$[$0].substr(0, $$[$0].length - 1);
      if (!($$[$0] in Parser.prefixes)) throw new Error('Unknown prefix: ' + $$[$0]);
      var uriString = resolveIRI(Parser.prefixes[$$[$0]]);
      this.$ = Parser.factory.namedNode(uriString);
    
break;
case 196: case 204: case 212: case 216: case 218: case 224: case 228: case 232: case 246: case 248: case 250: case 252: case 254: case 256: case 258: case 260: case 285: case 291: case 302: case 318: case 350: case 362: case 381: case 383: case 385: case 387: case 397: case 401: case 403: case 405:
$$[$0-1].push($$[$0]);
break;
case 211: case 223: case 245: case 247: case 249: case 255: case 259: case 380: case 382:
this.$ = [$$[$0]];
break;
case 262:
$$[$0-3].push($$[$0-2]);
break;
case 312: case 324: case 328: case 338: case 340: case 344: case 354: case 360: case 366: case 368: case 377:
$$[$0-2].push($$[$0-1]);
break;
}
},
table: [o($V0,$V1,{3:1,4:2,7:3}),{1:[3]},o($V2,[2,261],{5:4,8:5,286:6,9:7,95:8,17:9,33:10,42:11,47:12,96:13,18:14,6:[2,189],24:$V3,34:[1,15],43:[1,16],48:[1,17]}),o([6,24,34,43,48,99,109,112,114,115,124,125,130,297,298,299,300,301],[2,2],{287:19,11:20,14:21,12:[1,22],15:[1,23]}),{6:[1,24]},{6:[2,191]},{6:[2,192]},{6:[2,201],10:25,82:26,83:$V4},{6:[2,190]},o($V5,[2,197]),o($V5,[2,198]),o($V5,[2,199]),o($V5,[2,200]),{97:28,99:[1,29],102:30,105:31,109:[1,32],112:[1,33],114:[1,34],115:[1,35],116:36,120:37,124:[2,286],125:[2,280],129:43,130:[1,44],297:[1,38],298:[1,39],299:[1,40],300:[1,41],301:[1,42]},o($V6,[2,203],{19:45}),o($V7,[2,217],{35:46,37:47,39:[1,48]}),{13:$V8,16:$V9,28:$Va,44:49,53:54,285:$Vb,292:[1,51],293:52,294:50},o($V6,[2,231],{49:58}),o($Vc,[2,209],{25:59,288:60,289:[1,61],290:[1,62]}),o($V0,[2,196]),o($V0,[2,193]),o($V0,[2,194]),{13:[1,63]},{16:[1,64]},{1:[2,1]},{6:[2,3]},{6:[2,202]},{28:[1,66],29:[1,68],84:65,86:[1,67]},{6:[2,263],98:69,183:[1,70]},o($Vd,[2,265],{100:71,296:[1,72]}),o($Ve,[2,271],{103:73,296:[1,74]}),o($Vf,[2,276],{106:75,296:[1,76]}),{110:77,111:[2,278],296:[1,78]},{39:$Vg,113:79},{39:$Vg,113:81},{39:$Vg,113:82},{117:83,125:$Vh},{121:85,124:$Vi},o($Vj,[2,269]),o($Vj,[2,270]),o($Vk,[2,273]),o($Vk,[2,274]),o($Vk,[2,275]),{124:[2,287],125:[2,281]},{13:$V8,16:$V9,53:87,285:$Vb},{20:88,38:$Vl,39:$Vm,50:89,51:$Vn,54:90},o($V6,[2,215],{36:93}),{38:[1,94],50:95,51:$Vn},o($Vo,[2,343],{171:96,172:97,173:98,41:[2,341]}),o($Vp,[2,227],{45:99}),o($Vp,[2,225],{53:54,293:100,13:$V8,16:$V9,28:$Va,285:$Vb}),o($Vp,[2,226]),o($Vq,[2,223]),o($Vq,[2,221]),o($Vq,[2,222]),o($Vr,[2,186]),o($Vr,[2,187]),o($Vr,[2,188]),{20:101,38:$Vl,39:$Vm,50:102,51:$Vn,54:90},{26:103,27:106,28:$Vs,29:$Vt,291:104,292:[1,105]},o($Vc,[2,210]),o($Vc,[2,207]),o($Vc,[2,208]),o($V0,[2,4]),{13:[1,109]},o($Vu,[2,34]),{39:[1,110]},{39:[1,111]},{28:[1,113],88:112},{6:[2,42]},o($V0,$V1,{7:3,4:114}),{13:$V8,16:$V9,53:115,285:$Vb},o($Vd,[2,266]),{104:116,111:[1,117],133:[1,119],135:118,295:[1,120],302:[1,121]},o($Ve,[2,272]),o($Vd,$Vv,{107:122,134:124,111:$Vw,133:$Vx}),o($Vf,[2,277]),{111:[1,126]},{111:[2,279]},o($Vy,[2,47]),o($Vo,$Vz,{136:127,143:128,144:129,41:$VA,111:$VA}),o($Vy,[2,48]),o($Vy,[2,49]),o($VB,[2,282],{118:130,121:131,124:$Vi}),{39:$Vg,113:132},o($VB,[2,288],{122:133,117:134,125:$Vh}),{39:$Vg,113:135},o([124,125],[2,55]),o($VC,$VD,{21:136,56:137,60:138,61:$VE}),o($V6,[2,204]),{39:$VF,55:140},o($Vd,[2,233],{52:142,295:[1,143]}),{39:[2,236]},{20:144,38:$Vl,39:$Vm,50:145,51:$Vn,54:90},{39:[1,146]},o($V7,[2,218]),{41:[1,147]},{41:[2,342]},{13:$V8,16:$V9,28:$VG,29:$VH,53:152,80:$VI,86:$VJ,91:153,145:148,175:149,177:150,215:$VK,218:$VL,219:$VM,236:163,238:164,269:159,272:$VN,273:$VO,274:$VP,275:$VQ,276:$VR,277:$VS,278:$VT,279:$VU,280:$VV,281:$VW,282:$VX,283:$VY,284:$VZ,285:$Vb},o($V_,[2,229],{54:90,46:176,50:177,20:178,38:$Vl,39:$Vm,51:$Vn}),o($Vq,[2,224]),o($VC,$VD,{56:137,60:138,21:179,61:$VE}),o($V6,[2,232]),o($V6,[2,8]),o($V6,[2,213],{27:180,28:$Vs,29:$Vt}),o($V6,[2,214]),o($V$,[2,211]),o($V$,[2,9]),o($V01,$V11,{30:181,220:182,224:183,228:184,232:185,240:186,244:187,208:$V21,246:$V31,309:$V41}),o($V0,[2,5]),o($V51,[2,251],{85:191}),o($V61,[2,253],{87:192}),{28:[1,194],32:[1,193]},o($V71,[2,255]),o($V2,[2,262],{6:[2,264]}),o($Vy,[2,267],{101:195,131:196,132:[1,197]}),o($Vy,[2,44]),{13:$V8,16:$V9,53:198,285:$Vb},o($Vy,[2,60]),o($Vy,[2,296]),o($Vy,[2,297]),o($Vy,[2,298]),{108:[1,199]},o($V81,[2,57]),{13:$V8,16:$V9,53:200,285:$Vb},o($Vd,[2,295]),{13:$V8,16:$V9,53:201,285:$Vb},o($V91,[2,301],{137:202}),o($V91,[2,300]),{13:$V8,16:$V9,28:$VG,29:$VH,53:152,80:$VI,86:$VJ,91:153,145:203,175:149,177:150,215:$VK,218:$VL,219:$VM,236:163,238:164,269:159,272:$VN,273:$VO,274:$VP,275:$VQ,276:$VR,277:$VS,278:$VT,279:$VU,280:$VV,281:$VW,282:$VX,283:$VY,284:$VZ,285:$Vb},o($VB,[2,284],{119:204}),o($VB,[2,283]),o([38,124,127],[2,53]),o($VB,[2,290],{123:205}),o($VB,[2,289]),o([38,125,127],[2,52]),o($V5,[2,6]),o($Va1,[2,239],{57:206,67:207,68:[1,208]}),o($VC,[2,238]),{62:[1,209]},o([6,41,61,68,71,79,81,83],[2,16]),o($Vo,$Vb1,{22:210,147:211,18:212,148:213,154:214,155:215,24:$V3,39:$Vc1,41:$Vc1,83:$Vc1,111:$Vc1,159:$Vc1,160:$Vc1,162:$Vc1,165:$Vc1,166:$Vc1}),{13:$V8,16:$V9,53:216,285:$Vb},o($Vd,[2,234]),o($VC,$VD,{56:137,60:138,21:217,61:$VE}),o($V6,[2,216]),o($Vo,$Vz,{144:129,40:218,143:219,41:[2,219]}),o($V6,[2,84]),{41:[2,345],174:220,303:[1,221]},{13:$V8,16:$V9,28:$Vd1,53:226,176:222,180:223,185:224,187:$Ve1,285:$Vb},o($Vf1,[2,347],{180:223,185:224,53:226,178:228,179:229,176:230,13:$V8,16:$V9,28:$Vd1,187:$Ve1,285:$Vb}),o($Vg1,[2,124]),o($Vg1,[2,125]),o($Vg1,[2,126]),o($Vg1,[2,127]),o($Vg1,[2,128]),o($Vg1,[2,129]),{13:$V8,16:$V9,28:$VG,29:$VH,53:152,80:$VI,86:$VJ,91:153,175:233,177:234,189:232,214:231,215:$VK,218:$VL,219:$VM,236:163,238:164,269:159,272:$VN,273:$VO,274:$VP,275:$VQ,276:$VR,277:$VS,278:$VT,279:$VU,280:$VV,281:$VW,282:$VX,283:$VY,284:$VZ,285:$Vb},{13:$V8,16:$V9,28:$Vd1,53:226,176:235,180:223,185:224,187:$Ve1,285:$Vb},o($Vh1,[2,167],{270:[1,236],271:[1,237]}),o($Vh1,[2,170]),o($Vh1,[2,171]),o($Vh1,[2,172]),o($Vh1,[2,173]),o($Vh1,[2,174]),o($Vh1,[2,175]),o($Vi1,[2,176]),o($Vi1,[2,177]),o($Vi1,[2,178]),o($Vi1,[2,179]),o($Vh1,[2,180]),o($Vh1,[2,181]),o($Vh1,[2,182]),o($Vh1,[2,183]),o($Vh1,[2,184]),o($Vh1,[2,185]),o($VC,$VD,{56:137,60:138,21:238,61:$VE}),o($Vp,[2,228]),o($V_,[2,230]),o($V5,[2,14]),o($V$,[2,212]),{31:[1,239]},o($Vj1,[2,384],{221:240}),o($Vk1,[2,386],{225:241}),o($Vk1,[2,134],{229:242,230:243,231:[2,394],268:[1,244],310:[1,245],311:[1,246],312:[1,247],313:[1,248],314:[1,249],315:[1,250]}),o($Vl1,[2,396],{233:251}),o($Vm1,[2,404],{241:252}),{13:$V8,16:$V9,28:$Vn1,29:$Vo1,53:256,65:255,66:257,75:254,80:$VI,91:258,236:163,238:164,245:253,247:261,248:$Vp1,249:$Vq1,250:$Vr1,252:$Vs1,253:266,254:$Vt1,255:$Vu1,256:269,257:$Vv1,258:$Vw1,261:$Vx1,263:$Vy1,269:159,272:$VN,273:$VO,274:$VP,275:$VQ,276:$VR,277:$VS,278:$VT,279:$VU,280:$VV,281:$VW,282:$VX,283:$VY,284:$VZ,285:$Vb,315:$Vz1,316:$VA1,317:$VB1,318:$VC1,319:$VD1,320:$VE1},{13:$V8,16:$V9,28:$Vn1,29:$Vo1,53:256,65:255,66:257,75:254,80:$VI,91:258,236:163,238:164,245:279,247:261,248:$Vp1,249:$Vq1,250:$Vr1,252:$Vs1,253:266,254:$Vt1,255:$Vu1,256:269,257:$Vv1,258:$Vw1,261:$Vx1,263:$Vy1,269:159,272:$VN,273:$VO,274:$VP,275:$VQ,276:$VR,277:$VS,278:$VT,279:$VU,280:$VV,281:$VW,282:$VX,283:$VY,284:$VZ,285:$Vb,315:$Vz1,316:$VA1,317:$VB1,318:$VC1,319:$VD1,320:$VE1},{13:$V8,16:$V9,28:$Vn1,29:$Vo1,53:256,65:255,66:257,75:254,80:$VI,91:258,236:163,238:164,245:280,247:261,248:$Vp1,249:$Vq1,250:$Vr1,252:$Vs1,253:266,254:$Vt1,255:$Vu1,256:269,257:$Vv1,258:$Vw1,261:$Vx1,263:$Vy1,269:159,272:$VN,273:$VO,274:$VP,275:$VQ,276:$VR,277:$VS,278:$VT,279:$VU,280:$VV,281:$VW,282:$VX,283:$VY,284:$VZ,285:$Vb,315:$Vz1,316:$VA1,317:$VB1,318:$VC1,319:$VD1,320:$VE1},o($V01,[2,409]),{13:$V8,16:$V9,41:[1,281],53:283,80:$VI,90:282,91:284,92:$VF1,236:163,238:164,269:159,272:$VN,273:$VO,274:$VP,275:$VQ,276:$VR,277:$VS,278:$VT,279:$VU,280:$VV,281:$VW,282:$VX,283:$VY,284:$VZ,285:$Vb},{41:[1,286],86:[1,287]},{39:[1,288]},o($V71,[2,256]),o($Vy,[2,43]),o($Vy,[2,268]),{111:[1,289]},o($Vy,[2,59]),o($Vd,$Vv,{134:124,107:290,111:$Vw,133:$Vx}),o($V81,[2,58]),o($Vy,[2,46]),{41:[1,291],111:[1,293],138:292},o($V91,[2,313],{146:294,303:[1,295]}),{38:[1,296],126:297,127:$VG1},{38:[1,299],126:300,127:$VG1},o($VH1,[2,241],{58:301,70:302,71:[1,303]}),o($Va1,[2,240]),{13:$V8,16:$V9,29:$Vo1,53:309,65:307,66:308,69:304,75:306,77:305,247:261,248:$Vp1,249:$Vq1,250:$Vr1,252:$Vs1,253:266,254:$Vt1,255:$Vu1,256:269,257:$Vv1,258:$Vw1,261:$Vx1,263:$Vy1,285:$Vb,315:$Vz1,316:$VA1,317:$VB1,318:$VC1,319:$VD1,320:$VE1},{13:$V8,16:$V9,28:$VI1,29:$VJ1,53:309,63:310,64:311,65:312,66:313,247:261,248:$Vp1,249:$Vq1,250:$Vr1,252:$Vs1,253:266,254:$Vt1,255:$Vu1,256:269,257:$Vv1,258:$Vw1,261:$Vx1,263:$Vy1,285:$Vb,315:$Vz1,316:$VA1,317:$VB1,318:$VC1,319:$VD1,320:$VE1},{41:[1,316]},{41:[1,317]},{20:318,38:$Vl,39:$Vm,54:90},o($VK1,[2,317],{149:319}),o($VK1,[2,316]),{13:$V8,16:$V9,28:$VG,29:$VL1,53:152,80:$VI,86:$VJ,91:153,156:320,175:321,191:322,215:$VM1,218:$VL,219:$VM,236:163,238:164,269:159,272:$VN,273:$VO,274:$VP,275:$VQ,276:$VR,277:$VS,278:$VT,279:$VU,280:$VV,281:$VW,282:$VX,283:$VY,284:$VZ,285:$Vb},o($Vp,[2,15]),o($V5,[2,11]),{41:[1,325]},{41:[2,220]},{41:[2,85]},o($Vo,[2,344],{41:[2,346]}),o($Vf1,[2,86]),o($VN1,[2,349],{181:326}),o($Vo,$VO1,{186:327,188:328}),o($Vo,[2,92]),o($Vo,[2,93]),o($Vo,[2,94]),o($Vf1,[2,87]),o($Vf1,[2,88]),o($Vf1,[2,348]),{13:$V8,16:$V9,28:$VG,29:$VH,32:[1,329],53:152,80:$VI,86:$VJ,91:153,175:233,177:234,189:330,215:$VK,218:$VL,219:$VM,236:163,238:164,269:159,272:$VN,273:$VO,274:$VP,275:$VQ,276:$VR,277:$VS,278:$VT,279:$VU,280:$VV,281:$VW,282:$VX,283:$VY,284:$VZ,285:$Vb},o($VP1,[2,380]),o($VQ1,[2,120]),o($VQ1,[2,121]),{216:[1,331]},o($Vh1,[2,168]),{13:$V8,16:$V9,53:332,285:$Vb},o($V5,[2,13]),{28:[1,333]},o([31,32,183,251],[2,130],{222:334,223:[1,335]}),o($Vj1,[2,132],{226:336,227:[1,337]}),o($V01,$V11,{232:185,240:186,244:187,228:338,208:$V21,246:$V31,309:$V41}),{231:[1,339]},o($VR1,[2,388]),o($VR1,[2,389]),o($VR1,[2,390]),o($VR1,[2,391]),o($VR1,[2,392]),o($VR1,[2,393]),{231:[2,395]},o([31,32,183,223,227,231,251,268,310,311,312,313,314,315],[2,137],{234:340,235:341,236:342,238:343,246:[1,345],279:$VU,280:$VV,281:$VW,282:$VX,283:$VY,284:$VZ,309:[1,344]}),o($Vl1,[2,141],{242:346,243:347,292:$VS1,306:$VT1}),o($Vm1,[2,143]),o($Vm1,[2,146]),o($Vm1,[2,147]),o($Vm1,[2,148],{29:$VU1,86:$VV1}),o($Vm1,[2,149]),o($Vm1,[2,150]),o($Vm1,[2,151]),o($V01,$V11,{220:182,224:183,228:184,232:185,240:186,244:187,30:352,208:$V21,246:$V31,309:$V41}),o($VW1,[2,153]),{86:[1,353]},{29:[1,354]},{29:[1,355]},{29:[1,356]},{29:$VX1,86:$VY1,169:357},{29:[1,360]},{29:[1,362],86:[1,361]},{257:[1,363]},{29:[1,364]},{29:[1,365]},{29:[1,366]},o($VZ1,[2,410]),o($VZ1,[2,411]),o($VZ1,[2,412]),o($VZ1,[2,413]),o($VZ1,[2,414]),{257:[2,416]},o($Vm1,[2,144]),o($Vm1,[2,145]),o($Vu,[2,35]),o($V51,[2,252]),o($V_1,[2,38]),o($V_1,[2,39]),o($V_1,[2,40]),o($Vu,[2,36]),o($V61,[2,254]),o($V$1,[2,257],{89:367}),{13:$V8,16:$V9,53:368,285:$Vb},o($Vy,[2,45]),o([6,38,124,125,127,183],[2,61]),o($V91,[2,302]),{13:$V8,16:$V9,28:[1,370],53:371,139:369,285:$Vb},o($V91,[2,63]),o($Vo,[2,312],{41:$V02,111:$V02}),{39:$VF,55:372},o($VB,[2,285]),o($Vd,[2,292],{128:373,295:[1,374]}),{39:$VF,55:375},o($VB,[2,291]),o($V12,[2,243],{59:376,78:377,79:[1,378],81:[1,379]}),o($VH1,[2,242]),{62:[1,380]},o($Va1,[2,24],{247:261,253:266,256:269,75:306,65:307,66:308,53:309,77:381,13:$V8,16:$V9,29:$Vo1,248:$Vp1,249:$Vq1,250:$Vr1,252:$Vs1,254:$Vt1,255:$Vu1,257:$Vv1,258:$Vw1,261:$Vx1,263:$Vy1,285:$Vb,315:$Vz1,316:$VA1,317:$VB1,318:$VC1,319:$VD1,320:$VE1}),o($V22,[2,247]),o($V32,[2,77]),o($V32,[2,78]),o($V32,[2,79]),{29:$VU1,86:$VV1},o($VC,[2,18],{247:261,253:266,256:269,53:309,65:312,66:313,64:382,13:$V8,16:$V9,28:$VI1,29:$VJ1,248:$Vp1,249:$Vq1,250:$Vr1,252:$Vs1,254:$Vt1,255:$Vu1,257:$Vv1,258:$Vw1,261:$Vx1,263:$Vy1,285:$Vb,315:$Vz1,316:$VA1,317:$VB1,318:$VC1,319:$VD1,320:$VE1}),o($V42,[2,245]),o($V42,[2,19]),o($V42,[2,20]),o($V01,$V11,{220:182,224:183,228:184,232:185,240:186,244:187,30:383,208:$V21,246:$V31,309:$V41}),o($V42,[2,23]),o($V52,[2,64]),o($V52,[2,65]),o($VC,$VD,{56:137,60:138,21:384,61:$VE}),{39:[2,327],41:[2,66],82:394,83:$V4,111:[1,390],150:385,151:386,158:387,159:[1,388],160:[1,389],162:[1,391],165:[1,392],166:[1,393]},o($VK1,[2,325],{157:395,303:[1,396]}),o($V62,$V72,{190:397,193:398,199:399,200:401,28:$V82}),o($V92,[2,355],{193:398,199:399,200:401,192:402,190:403,13:$V72,16:$V72,29:$V72,187:$V72,208:$V72,213:$V72,285:$V72,28:$V82}),{13:$V8,16:$V9,28:$VG,29:$VL1,53:152,80:$VI,86:$VJ,91:153,175:406,191:407,195:405,215:$VM1,217:404,218:$VL,219:$VM,236:163,238:164,269:159,272:$VN,273:$VO,274:$VP,275:$VQ,276:$VR,277:$VS,278:$VT,279:$VU,280:$VV,281:$VW,282:$VX,283:$VY,284:$VZ,285:$Vb},o($V62,$V72,{193:398,199:399,200:401,190:408,28:$V82}),o($VC,$VD,{56:137,60:138,21:409,61:$VE}),o([41,111,216,303],[2,89],{182:410,183:[1,411]}),o($VN1,[2,91]),{13:$V8,16:$V9,28:$VG,29:$VH,53:152,80:$VI,86:$VJ,91:153,175:233,177:234,189:412,215:$VK,218:$VL,219:$VM,236:163,238:164,269:159,272:$VN,273:$VO,274:$VP,275:$VQ,276:$VR,277:$VS,278:$VT,279:$VU,280:$VV,281:$VW,282:$VX,283:$VY,284:$VZ,285:$Vb},o($Va2,[2,116]),o($VP1,[2,381]),o($Va2,[2,117]),o($Vh1,[2,169]),{32:[1,413]},o($Vj1,[2,385]),o($V01,$V11,{224:183,228:184,232:185,240:186,244:187,220:414,208:$V21,246:$V31,309:$V41}),o($Vk1,[2,387]),o($V01,$V11,{228:184,232:185,240:186,244:187,224:415,208:$V21,246:$V31,309:$V41}),o($Vk1,[2,135]),{29:$VX1,86:$VY1,169:416},o($Vl1,[2,397]),o($V01,$V11,{240:186,244:187,232:417,208:$V21,246:$V31,309:$V41}),o($Vm1,[2,400],{237:418}),o($Vm1,[2,402],{239:419}),o($VR1,[2,398]),o($VR1,[2,399]),o($Vm1,[2,405]),o($V01,$V11,{244:187,240:420,208:$V21,246:$V31,309:$V41}),o($VR1,[2,406]),o($VR1,[2,407]),o($VW1,[2,80]),o($VR1,[2,335],{167:421,289:[1,422]}),{32:[1,423]},o($VW1,[2,154]),o($V01,$V11,{220:182,224:183,228:184,232:185,240:186,244:187,30:424,208:$V21,246:$V31,309:$V41}),o($V01,$V11,{220:182,224:183,228:184,232:185,240:186,244:187,30:425,208:$V21,246:$V31,309:$V41}),o($V01,$V11,{220:182,224:183,228:184,232:185,240:186,244:187,30:426,208:$V21,246:$V31,309:$V41}),o($VW1,[2,158]),o($VW1,[2,82]),o($VR1,[2,339],{170:427}),{28:[1,428]},o($VW1,[2,160]),o($V01,$V11,{220:182,224:183,228:184,232:185,240:186,244:187,30:429,208:$V21,246:$V31,309:$V41}),{39:$VF,55:430},o($Vb2,[2,417],{259:431,289:[1,432]}),o($VR1,[2,421],{262:433,289:[1,434]}),o($VR1,[2,423],{264:435,289:[1,436]}),{29:[1,439],41:[1,437],93:438},o($Vy,[2,56]),{39:[1,440]},{39:[2,303]},{39:[2,304]},o($Vy,[2,50]),{13:$V8,16:$V9,53:441,285:$Vb},o($Vd,[2,293]),o($Vy,[2,51]),o($V12,[2,17]),o($V12,[2,244]),{80:[1,442]},{80:[1,443]},{13:$V8,16:$V9,28:$Vc2,29:$Vo1,53:309,65:307,66:308,72:444,73:445,74:$Vd2,75:306,76:$Ve2,77:448,247:261,248:$Vp1,249:$Vq1,250:$Vr1,252:$Vs1,253:266,254:$Vt1,255:$Vu1,256:269,257:$Vv1,258:$Vw1,261:$Vx1,263:$Vy1,285:$Vb,315:$Vz1,316:$VA1,317:$VB1,318:$VC1,319:$VD1,320:$VE1},o($V22,[2,248]),o($V42,[2,246]),{31:[1,451],32:[1,450]},{23:452,41:[2,205],82:453,83:$V4},o($VK1,[2,318]),o($Vf2,[2,319],{152:454,303:[1,455]}),{39:$VF,55:456},{39:$VF,55:457},{39:$VF,55:458},{13:$V8,16:$V9,28:[1,460],53:461,161:459,285:$Vb},o($Vg2,[2,331],{163:462,296:[1,463]}),{13:$V8,16:$V9,29:$Vo1,53:309,65:307,66:308,75:306,77:464,247:261,248:$Vp1,249:$Vq1,250:$Vr1,252:$Vs1,253:266,254:$Vt1,255:$Vu1,256:269,257:$Vv1,258:$Vw1,261:$Vx1,263:$Vy1,285:$Vb,315:$Vz1,316:$VA1,317:$VB1,318:$VC1,319:$VD1,320:$VE1},{29:[1,465]},o($Vh2,[2,76]),o($VK1,[2,68]),o($Vo,[2,324],{39:$Vi2,41:$Vi2,83:$Vi2,111:$Vi2,159:$Vi2,160:$Vi2,162:$Vi2,165:$Vi2,166:$Vi2}),o($V92,[2,96]),o($Vo,[2,359],{194:466}),o($Vo,[2,357]),o($Vo,[2,358]),o($V62,[2,367],{201:467,202:468}),o($V92,[2,97]),o($V92,[2,356]),{13:$V8,16:$V9,28:$VG,29:$VL1,32:[1,469],53:152,80:$VI,86:$VJ,91:153,175:406,191:407,195:470,215:$VM1,218:$VL,219:$VM,236:163,238:164,269:159,272:$VN,273:$VO,274:$VP,275:$VQ,276:$VR,277:$VS,278:$VT,279:$VU,280:$VV,281:$VW,282:$VX,283:$VY,284:$VZ,285:$Vb},o($VP1,[2,382]),o($VQ1,[2,122]),o($VQ1,[2,123]),{216:[1,471]},o($V5,[2,12]),o($VN1,[2,350]),o($VN1,[2,351],{185:224,53:226,184:472,180:473,13:$V8,16:$V9,28:$Vd1,187:$Ve1,285:$Vb}),o($Vj2,[2,95],{251:[1,474]}),o($V$,[2,10]),o($Vj1,[2,131]),o($Vk1,[2,133]),o($Vk1,[2,136]),o($Vl1,[2,138]),o($Vl1,[2,139],{243:347,242:475,292:$VS1,306:$VT1}),o($Vl1,[2,140],{243:347,242:476,292:$VS1,306:$VT1}),o($Vm1,[2,142]),o($VR1,[2,337],{168:477}),o($VR1,[2,336]),o([6,13,16,28,29,31,32,39,41,71,74,76,79,80,81,83,86,111,159,160,162,165,166,183,215,218,219,223,227,231,246,248,249,250,251,252,254,255,257,258,261,263,268,272,273,274,275,276,277,278,279,280,281,282,283,284,285,292,303,306,309,310,311,312,313,314,315,316,317,318,319,320],[2,152]),{32:[1,478]},{251:[1,479]},{251:[1,480]},o($V01,$V11,{220:182,224:183,228:184,232:185,240:186,244:187,30:481,208:$V21,246:$V31,309:$V41}),{32:[1,482]},{32:[1,483]},o($VW1,[2,162]),o($V01,$V11,{220:182,224:183,228:184,232:185,240:186,244:187,260:484,30:486,208:$V21,246:$V31,292:[1,485],309:$V41}),o($Vb2,[2,418]),o($V01,$V11,{220:182,224:183,228:184,232:185,240:186,244:187,30:487,208:$V21,246:$V31,309:$V41}),o($VR1,[2,422]),o($V01,$V11,{220:182,224:183,228:184,232:185,240:186,244:187,30:488,208:$V21,246:$V31,309:$V41}),o($VR1,[2,424]),o($Vu,[2,37]),o($V$1,[2,258]),{13:$V8,16:$V9,53:283,80:$VI,90:490,91:284,92:$VF1,94:489,236:163,238:164,269:159,272:$VN,273:$VO,274:$VP,275:$VQ,276:$VR,277:$VS,278:$VT,279:$VU,280:$VV,281:$VW,282:$VX,283:$VY,284:$VZ,285:$Vb},o($Vo,$Vz,{144:129,140:491,143:492,41:[2,305]}),o($VB,[2,54]),o($V12,[2,30],{81:[1,493]}),o($V12,[2,31],{79:[1,494]}),o($VH1,[2,25],{247:261,253:266,256:269,75:306,65:307,66:308,53:309,77:448,73:495,13:$V8,16:$V9,28:$Vc2,29:$Vo1,74:$Vd2,76:$Ve2,248:$Vp1,249:$Vq1,250:$Vr1,252:$Vs1,254:$Vt1,255:$Vu1,257:$Vv1,258:$Vw1,261:$Vx1,263:$Vy1,285:$Vb,315:$Vz1,316:$VA1,317:$VB1,318:$VC1,319:$VD1,320:$VE1}),o($Vk2,[2,249]),{29:$Vo1,75:496},{29:$Vo1,75:497},o($Vk2,[2,28]),o($Vk2,[2,29]),o($V42,[2,21]),{28:[1,498]},{41:[2,7]},{41:[2,206]},o($Vo,$Vb1,{155:215,153:499,154:500,39:$Vl2,41:$Vl2,83:$Vl2,111:$Vl2,159:$Vl2,160:$Vl2,162:$Vl2,165:$Vl2,166:$Vl2}),o($Vf2,[2,320]),o($Vh2,[2,69],{304:[1,501]}),o($Vh2,[2,70]),o($Vh2,[2,71]),{39:$VF,55:502},{39:[2,329]},{39:[2,330]},{13:$V8,16:$V9,28:[1,504],53:505,164:503,285:$Vb},o($Vg2,[2,332]),o($Vh2,[2,74]),o($V01,$V11,{220:182,224:183,228:184,232:185,240:186,244:187,30:506,208:$V21,246:$V31,309:$V41}),{13:$V8,16:$V9,28:$VG,29:$VL1,53:152,80:$VI,86:$VJ,91:153,175:406,191:407,195:507,215:$VM1,218:$VL,219:$VM,236:163,238:164,269:159,272:$VN,273:$VO,274:$VP,275:$VQ,276:$VR,277:$VS,278:$VT,279:$VU,280:$VV,281:$VW,282:$VX,283:$VY,284:$VZ,285:$Vb},o($VP1,[2,101],{305:[1,508]}),o($Vm2,[2,374],{203:509,207:510,213:[1,511]}),o($Vg1,[2,118]),o($VP1,[2,383]),o($Vg1,[2,119]),o($VN1,[2,90]),o($VN1,[2,352]),o($Vo,[2,354]),o($Vm1,[2,401]),o($Vm1,[2,403]),o($V01,$V11,{220:182,224:183,228:184,232:185,240:186,244:187,30:512,208:$V21,246:$V31,309:$V41}),o($VW1,[2,155]),o($V01,$V11,{220:182,224:183,228:184,232:185,240:186,244:187,30:513,208:$V21,246:$V31,309:$V41}),o($V01,$V11,{220:182,224:183,228:184,232:185,240:186,244:187,30:514,208:$V21,246:$V31,309:$V41}),{32:[1,515],251:[1,516]},o($VW1,[2,159]),o($VW1,[2,161]),{32:[1,517]},{32:[2,419]},{32:[2,420]},{32:[1,518]},{32:[2,425],183:[1,521],265:519,266:520},{13:$V8,16:$V9,32:[1,522],53:283,80:$VI,90:523,91:284,92:$VF1,236:163,238:164,269:159,272:$VN,273:$VO,274:$VP,275:$VQ,276:$VR,277:$VS,278:$VT,279:$VU,280:$VV,281:$VW,282:$VX,283:$VY,284:$VZ,285:$Vb},o($Vn2,[2,259]),{41:[1,524]},{41:[2,306]},{80:[1,525]},{80:[1,526]},o($Vk2,[2,250]),o($Vk2,[2,26]),o($Vk2,[2,27]),{32:[1,527]},o($VK1,[2,67]),o($VK1,[2,322]),{39:[2,328]},o($Vh2,[2,72]),{39:$VF,55:528},{39:[2,333]},{39:[2,334]},{31:[1,529]},o($Vj2,[2,361],{196:530,251:[1,531]}),o($V62,[2,366]),o([13,16,28,29,32,80,86,215,218,219,272,273,274,275,276,277,278,279,280,281,282,283,284,285,305],[2,102],{306:[1,532]}),{13:$V8,16:$V9,29:[1,538],53:535,187:[1,536],204:533,205:534,208:[1,537],285:$Vb},o($Vm2,[2,375]),{32:[1,539],251:[1,540]},{32:[1,541]},{251:[1,542]},o($VW1,[2,83]),o($VR1,[2,340]),o($VW1,[2,163]),o($VW1,[2,164]),{32:[1,543]},{32:[2,426]},{267:[1,544]},o($V$1,[2,41]),o($Vn2,[2,260]),o($Vo2,[2,307],{141:545,303:[1,546]}),o($V12,[2,32]),o($V12,[2,33]),o($V42,[2,22]),o($Vh2,[2,73]),{28:[1,547]},o([39,41,83,111,159,160,162,165,166,216,303],[2,98],{197:548,183:[1,549]}),o($Vo,[2,360]),o($V62,[2,368]),o($Vp2,[2,104]),o($Vp2,[2,372],{206:550,307:551,292:[1,553],308:[1,552],309:[1,554]}),o($Vq2,[2,105]),o($Vq2,[2,106]),{13:$V8,16:$V9,29:[1,558],53:559,86:[1,557],187:$Vr2,209:555,210:556,213:$Vs2,285:$Vb},o($V62,$V72,{200:401,199:562}),o($VW1,[2,81]),o($VR1,[2,338]),o($VW1,[2,156]),o($V01,$V11,{220:182,224:183,228:184,232:185,240:186,244:187,30:563,208:$V21,246:$V31,309:$V41}),o($VW1,[2,165]),{268:[1,564]},o($Vo,$Vz,{144:129,142:565,143:566,41:$Vt2,111:$Vt2}),o($Vo2,[2,308]),{32:[1,567]},o($Vj2,[2,362]),o($Vj2,[2,99],{200:401,198:568,199:569,13:$V72,16:$V72,29:$V72,187:$V72,208:$V72,213:$V72,285:$V72,28:[1,570]}),o($Vp2,[2,103]),o($Vp2,[2,373]),o($Vp2,[2,369]),o($Vp2,[2,370]),o($Vp2,[2,371]),o($Vq2,[2,107]),o($Vq2,[2,109]),o($Vq2,[2,110]),o($Vu2,[2,376],{211:571}),o($Vq2,[2,112]),o($Vq2,[2,113]),{13:$V8,16:$V9,53:572,187:[1,573],285:$Vb},{32:[1,574]},{32:[1,575]},{269:576,275:$VQ,276:$VR,277:$VS,278:$VT},o($V91,[2,62]),o($V91,[2,310]),o($Vh2,[2,75]),o($Vo,$VO1,{188:328,186:577}),o($Vo,[2,363]),o($Vo,[2,364]),{13:$V8,16:$V9,32:[2,378],53:559,187:$Vr2,210:579,212:578,213:$Vs2,285:$Vb},o($Vq2,[2,114]),o($Vq2,[2,115]),o($Vq2,[2,108]),o($VW1,[2,157]),{32:[2,166]},o($Vj2,[2,100]),{32:[1,580]},{32:[2,379],305:[1,581]},o($Vq2,[2,111]),o($Vu2,[2,377])],
defaultActions: {5:[2,191],6:[2,192],8:[2,190],24:[2,1],25:[2,3],26:[2,202],69:[2,42],78:[2,279],92:[2,236],97:[2,342],219:[2,220],220:[2,85],250:[2,395],278:[2,416],370:[2,303],371:[2,304],452:[2,7],453:[2,206],460:[2,329],461:[2,330],485:[2,419],486:[2,420],492:[2,306],501:[2,328],504:[2,333],505:[2,334],520:[2,426],576:[2,166]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

  /*
    SPARQL parser in the Jison parser generator format.
  */

  var Wildcard = require('./Wildcard').Wildcard;

  // Common namespaces and entities
  var RDF = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',
      RDF_TYPE  = RDF + 'type',
      RDF_FIRST = RDF + 'first',
      RDF_REST  = RDF + 'rest',
      RDF_NIL   = RDF + 'nil',
      XSD = 'http://www.w3.org/2001/XMLSchema#',
      XSD_INTEGER  = XSD + 'integer',
      XSD_DECIMAL  = XSD + 'decimal',
      XSD_DOUBLE   = XSD + 'double',
      XSD_BOOLEAN  = XSD + 'boolean';

  var base = '', basePath = '', baseRoot = '';

  // Returns a lowercase version of the given string
  function lowercase(string) {
    return string.toLowerCase();
  }

  // Appends the item to the array and returns the array
  function appendTo(array, item) {
    return array.push(item), array;
  }

  // Appends the items to the array and returns the array
  function appendAllTo(array, items) {
    return array.push.apply(array, items), array;
  }

  // Extends a base object with properties of other objects
  function extend(base) {
    if (!base) base = {};
    for (var i = 1, l = arguments.length, arg; i < l && (arg = arguments[i] || {}); i++)
      for (var name in arg)
        base[name] = arg[name];
    return base;
  }

  // Creates an array that contains all items of the given arrays
  function unionAll() {
    var union = [];
    for (var i = 0, l = arguments.length; i < l; i++)
      union = union.concat.apply(union, arguments[i]);
    return union;
  }

  // Resolves an IRI against a base path
  function resolveIRI(iri) {
    // Strip off possible angular brackets
    if (iri[0] === '<')
      iri = iri.substring(1, iri.length - 1);
    // Return absolute IRIs unmodified
    if (/^[a-z]+:/.test(iri))
      return iri;
    if (!Parser.base)
      throw new Error('Cannot resolve relative IRI ' + iri + ' because no base IRI was set.');
    if (!base) {
      base = Parser.base;
      basePath = base.replace(/[^\/:]*$/, '');
      baseRoot = base.match(/^(?:[a-z]+:\/*)?[^\/]*/)[0];
    }
    switch (iri[0]) {
    // An empty relative IRI indicates the base IRI
    case undefined:
      return base;
    // Resolve relative fragment IRIs against the base IRI
    case '#':
      return base + iri;
    // Resolve relative query string IRIs by replacing the query string
    case '?':
      return base.replace(/(?:\?.*)?$/, iri);
    // Resolve root relative IRIs at the root of the base IRI
    case '/':
      return baseRoot + iri;
    // Resolve all other IRIs at the base IRI's path
    default:
      return basePath + iri;
    }
  }

  // If the item is a variable, ensures it starts with a question mark
  function toVar(variable) {
    if (variable) {
      var first = variable[0];
      if (first === '?' || first === '$') return Parser.factory.variable(variable.substr(1));
    }
    return variable;
  }

  // Creates an operation with the given name and arguments
  function operation(operatorName, args) {
    return { type: 'operation', operator: operatorName, args: args || [] };
  }

  // Creates an expression with the given type and attributes
  function expression(expr, attr) {
    var expression = { expression: expr === '*'? new Wildcard() : expr };
    if (attr)
      for (var a in attr)
        expression[a] = attr[a];
    return expression;
  }

  // Creates a path with the given type and items
  function path(type, items) {
    return { type: 'path', pathType: type, items: items };
  }

  // Transforms a list of operations types and arguments into a tree of operations
  function createOperationTree(initialExpression, operationList) {
    for (var i = 0, l = operationList.length, item; i < l && (item = operationList[i]); i++)
      initialExpression = operation(item[0], [initialExpression, item[1]]);
    return initialExpression;
  }

  // Group datasets by default and named
  function groupDatasets(fromClauses) {
    var defaults = [], named = [], l = fromClauses.length, fromClause;
    for (var i = 0; i < l && (fromClause = fromClauses[i]); i++)
      (fromClause.named ? named : defaults).push(fromClause.iri);
    return l ? { from: { default: defaults, named: named } } : null;
  }

  // Converts the number to a string
  function toInt(string) {
    return parseInt(string, 10);
  }

  // Transforms a possibly single group into its patterns
  function degroupSingle(group) {
    return group.type === 'group' && group.patterns.length === 1 ? group.patterns[0] : group;
  }

  // Creates a literal with the given value and type
  function createTypedLiteral(value, type) {
    if (type && type.termType !== 'NamedNode'){
      type = Parser.factory.namedNode(type);
    }
    return Parser.factory.literal(value, type);
  }

  // Creates a literal with the given value and language
  function createLangLiteral(value, lang) {
    return Parser.factory.literal(value, lang);
  }

  // Creates a triple with the given subject, predicate, and object
  function triple(subject, predicate, object) {
    var triple = {};
    if (subject   != null) triple.subject   = subject;
    if (predicate != null) triple.predicate = predicate;
    if (object    != null) triple.object    = object;
    return triple;
  }

  // Creates a new blank node
  function blank(name) {
    if (typeof name === 'string') {  // Only use name if a name is given
      if (name.startsWith('e_')) return Parser.factory.blankNode(name);
      return Parser.factory.blankNode('e_' + name);
    }
    return Parser.factory.blankNode('g_' + blankId++);
  };
  var blankId = 0;
  Parser._resetBlanks = function () { blankId = 0; }

  // Regular expression and replacement strings to escape strings
  var escapeSequence = /\\u([a-fA-F0-9]{4})|\\U([a-fA-F0-9]{8})|\\(.)/g,
      escapeReplacements = { '\\': '\\', "'": "'", '"': '"',
                             't': '\t', 'b': '\b', 'n': '\n', 'r': '\r', 'f': '\f' },
      fromCharCode = String.fromCharCode;

  // Translates escape codes in the string into their textual equivalent
  function unescapeString(string, trimLength) {
    string = string.substring(trimLength, string.length - trimLength);
    try {
      string = string.replace(escapeSequence, function (sequence, unicode4, unicode8, escapedChar) {
        var charCode;
        if (unicode4) {
          charCode = parseInt(unicode4, 16);
          if (isNaN(charCode)) throw new Error(); // can never happen (regex), but helps performance
          return fromCharCode(charCode);
        }
        else if (unicode8) {
          charCode = parseInt(unicode8, 16);
          if (isNaN(charCode)) throw new Error(); // can never happen (regex), but helps performance
          if (charCode < 0xFFFF) return fromCharCode(charCode);
          return fromCharCode(0xD800 + ((charCode -= 0x10000) >> 10), 0xDC00 + (charCode & 0x3FF));
        }
        else {
          var replacement = escapeReplacements[escapedChar];
          if (!replacement) throw new Error();
          return replacement;
        }
      });
    }
    catch (error) { return ''; }
    return string;
  }

  // Creates a list, collecting its (possibly blank) items and triples associated with those items
  function createList(objects) {
    var list = blank(), head = list, listItems = [], listTriples, triples = [];
    objects.forEach(function (o) { listItems.push(o.entity); appendAllTo(triples, o.triples); });

    // Build an RDF list out of the items
    for (var i = 0, j = 0, l = listItems.length, listTriples = Array(l * 2); i < l;)
      listTriples[j++] = triple(head, Parser.factory.namedNode(RDF_FIRST), listItems[i]),
      listTriples[j++] = triple(head, Parser.factory.namedNode(RDF_REST),  head = ++i < l ? blank() : Parser.factory.namedNode(RDF_NIL));

    // Return the list's identifier, its triples, and the triples associated with its items
    return { entity: list, triples: appendAllTo(listTriples, triples) };
  }

  // Creates a blank node identifier, collecting triples with that blank node as subject
  function createAnonymousObject(propertyList) {
    var entity = blank();
    return {
      entity: entity,
      triples: propertyList.map(function (t) { return extend(triple(entity), t); })
    };
  }

  // Collects all (possibly blank) objects, and triples that have them as subject
  function objectListToTriples(predicate, objectList, otherTriples) {
    var objects = [], triples = [];
    objectList.forEach(function (l) {
      objects.push(triple(null, predicate, l.entity));
      appendAllTo(triples, l.triples);
    });
    return unionAll(objects, otherTriples || [], triples);
  }

  // Simplifies groups by merging adjacent BGPs
  function mergeAdjacentBGPs(groups) {
    var merged = [], currentBgp;
    for (var i = 0, group; group = groups[i]; i++) {
      switch (group.type) {
        // Add a BGP's triples to the current BGP
        case 'bgp':
          if (group.triples.length) {
            if (!currentBgp)
              appendTo(merged, currentBgp = group);
            else
              appendAllTo(currentBgp.triples, group.triples);
          }
          break;
        // All other groups break up a BGP
        default:
          // Only add the group if its pattern is non-empty
          if (!group.patterns || group.patterns.length > 0) {
            appendTo(merged, group);
            currentBgp = null;
          }
      }
    }
    return merged;
  }
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"flex":true,"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* ignore */
break;
case 1:return 12
break;
case 2:return 15
break;
case 3:return 24
break;
case 4:return 289
break;
case 5:return 290
break;
case 6:return 29
break;
case 7:return 31
break;
case 8:return 32
break;
case 9:return 292
break;
case 10:return 34
break;
case 11:return 38
break;
case 12:return 39
break;
case 13:return 41
break;
case 14:return 43
break;
case 15:return 48
break;
case 16:return 51
break;
case 17:return 295
break;
case 18:return 61
break;
case 19:return 62
break;
case 20:return 68
break;
case 21:return 71
break;
case 22:return 74
break;
case 23:return 76
break;
case 24:return 79
break;
case 25:return 81
break;
case 26:return 83
break;
case 27:return 183
break;
case 28:return 99
break;
case 29:return 296
break;
case 30:return 132
break;
case 31:return 297
break;
case 32:return 298
break;
case 33:return 109
break;
case 34:return 299
break;
case 35:return 108
break;
case 36:return 300
break;
case 37:return 301
break;
case 38:return 112
break;
case 39:return 114
break;
case 40:return 115
break;
case 41:return 130
break;
case 42:return 124
break;
case 43:return 125
break;
case 44:return 127
break;
case 45:return 133
break;
case 46:return 111
break;
case 47:return 302
break;
case 48:return 303
break;
case 49:return 159
break;
case 50:return 162
break;
case 51:return 166
break;
case 52:return 92
break;
case 53:return 160
break;
case 54:return 304
break;
case 55:return 165
break;
case 56:return 251
break;
case 57:return 187
break;
case 58:return 305
break;
case 59:return 306
break;
case 60:return 213
break;
case 61:return 308
break;
case 62:return 309
break;
case 63:return 208
break;
case 64:return 215
break;
case 65:return 216
break;
case 66:return 223
break;
case 67:return 227
break;
case 68:return 268
break;
case 69:return 310
break;
case 70:return 311
break;
case 71:return 312
break;
case 72:return 313
break;
case 73:return 314
break;
case 74:return 231
break;
case 75:return 315
break;
case 76:return 246
break;
case 77:return 254
break;
case 78:return 255
break;
case 79:return 248
break;
case 80:return 249
break;
case 81:return 250
break;
case 82:return 316
break;
case 83:return 317
break;
case 84:return 252
break;
case 85:return 319
break;
case 86:return 318
break;
case 87:return 320
break;
case 88:return 257
break;
case 89:return 258
break;
case 90:return 261
break;
case 91:return 263
break;
case 92:return 267
break;
case 93:return 271
break;
case 94:return 274
break;
case 95:return 13
break;
case 96:return 16
break;
case 97:return 285
break;
case 98:return 218
break;
case 99:return 28
break;
case 100:return 270
break;
case 101:return 80
break;
case 102:return 272
break;
case 103:return 273
break;
case 104:return 279
break;
case 105:return 280
break;
case 106:return 281
break;
case 107:return 282
break;
case 108:return 283
break;
case 109:return 284
break;
case 110:return 'EXPONENT'
break;
case 111:return 275
break;
case 112:return 276
break;
case 113:return 277
break;
case 114:return 278
break;
case 115:return 86
break;
case 116:return 219
break;
case 117:return 6
break;
case 118:return 'INVALID'
break;
case 119:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:\s+|#[^\n\r]*)/i,/^(?:BASE)/i,/^(?:PREFIX)/i,/^(?:SELECT)/i,/^(?:DISTINCT)/i,/^(?:REDUCED)/i,/^(?:\()/i,/^(?:AS)/i,/^(?:\))/i,/^(?:\*)/i,/^(?:CONSTRUCT)/i,/^(?:WHERE)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:DESCRIBE)/i,/^(?:ASK)/i,/^(?:FROM)/i,/^(?:NAMED)/i,/^(?:GROUP)/i,/^(?:BY)/i,/^(?:HAVING)/i,/^(?:ORDER)/i,/^(?:ASC)/i,/^(?:DESC)/i,/^(?:LIMIT)/i,/^(?:OFFSET)/i,/^(?:VALUES)/i,/^(?:;)/i,/^(?:LOAD)/i,/^(?:SILENT)/i,/^(?:INTO)/i,/^(?:CLEAR)/i,/^(?:DROP)/i,/^(?:CREATE)/i,/^(?:ADD)/i,/^(?:TO)/i,/^(?:MOVE)/i,/^(?:COPY)/i,/^(?:INSERT\s+DATA)/i,/^(?:DELETE\s+DATA)/i,/^(?:DELETE\s+WHERE)/i,/^(?:WITH)/i,/^(?:DELETE)/i,/^(?:INSERT)/i,/^(?:USING)/i,/^(?:DEFAULT)/i,/^(?:GRAPH)/i,/^(?:ALL)/i,/^(?:\.)/i,/^(?:OPTIONAL)/i,/^(?:SERVICE)/i,/^(?:BIND)/i,/^(?:UNDEF)/i,/^(?:MINUS)/i,/^(?:UNION)/i,/^(?:FILTER)/i,/^(?:,)/i,/^(?:a)/i,/^(?:\|)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:\?)/i,/^(?:\+)/i,/^(?:!)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:IN)/i,/^(?:NOT)/i,/^(?:-)/i,/^(?:BOUND)/i,/^(?:BNODE)/i,/^(?:(RAND|NOW|UUID|STRUUID))/i,/^(?:(LANG|DATATYPE|IRI|URI|ABS|CEIL|FLOOR|ROUND|STRLEN|STR|UCASE|LCASE|ENCODE_FOR_URI|YEAR|MONTH|DAY|HOURS|MINUTES|SECONDS|TIMEZONE|TZ|MD5|SHA1|SHA256|SHA384|SHA512|isIRI|isURI|isBLANK|isLITERAL|isNUMERIC))/i,/^(?:(LANGMATCHES|CONTAINS|STRSTARTS|STRENDS|STRBEFORE|STRAFTER|STRLANG|STRDT|sameTerm))/i,/^(?:CONCAT)/i,/^(?:COALESCE)/i,/^(?:IF)/i,/^(?:REGEX)/i,/^(?:SUBSTR)/i,/^(?:REPLACE)/i,/^(?:EXISTS)/i,/^(?:COUNT)/i,/^(?:SUM|MIN|MAX|AVG|SAMPLE)/i,/^(?:GROUP_CONCAT)/i,/^(?:SEPARATOR)/i,/^(?:\^\^)/i,/^(?:true|false)/i,/^(?:(<([^<>\"\{\}\|\^`\\\u0000-\u0020])*>))/i,/^(?:((([A-Z]|[a-z]|[\u00C0-\u00D6]|[\u00D8-\u00F6]|[\u00F8-\u02FF]|[\u0370-\u037D]|[\u037F-\u1FFF]|[\u200C-\u200D]|[\u2070-\u218F]|[\u2C00-\u2FEF]|[\u3001-\uD7FF]|[\uF900-\uFDCF]|[\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])(((((?:([A-Z]|[a-z]|[\u00C0-\u00D6]|[\u00D8-\u00F6]|[\u00F8-\u02FF]|[\u0370-\u037D]|[\u037F-\u1FFF]|[\u200C-\u200D]|[\u2070-\u218F]|[\u2C00-\u2FEF]|[\u3001-\uD7FF]|[\uF900-\uFDCF]|[\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|-|[0-9]|\u00B7|[\u0300-\u036F]|[\u203F-\u2040])|\.)*(((?:([A-Z]|[a-z]|[\u00C0-\u00D6]|[\u00D8-\u00F6]|[\u00F8-\u02FF]|[\u0370-\u037D]|[\u037F-\u1FFF]|[\u200C-\u200D]|[\u2070-\u218F]|[\u2C00-\u2FEF]|[\u3001-\uD7FF]|[\uF900-\uFDCF]|[\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|-|[0-9]|\u00B7|[\u0300-\u036F]|[\u203F-\u2040]))?)?:))/i,/^(?:(((([A-Z]|[a-z]|[\u00C0-\u00D6]|[\u00D8-\u00F6]|[\u00F8-\u02FF]|[\u0370-\u037D]|[\u037F-\u1FFF]|[\u200C-\u200D]|[\u2070-\u218F]|[\u2C00-\u2FEF]|[\u3001-\uD7FF]|[\uF900-\uFDCF]|[\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])(((((?:([A-Z]|[a-z]|[\u00C0-\u00D6]|[\u00D8-\u00F6]|[\u00F8-\u02FF]|[\u0370-\u037D]|[\u037F-\u1FFF]|[\u200C-\u200D]|[\u2070-\u218F]|[\u2C00-\u2FEF]|[\u3001-\uD7FF]|[\uF900-\uFDCF]|[\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|-|[0-9]|\u00B7|[\u0300-\u036F]|[\u203F-\u2040])|\.)*(((?:([A-Z]|[a-z]|[\u00C0-\u00D6]|[\u00D8-\u00F6]|[\u00F8-\u02FF]|[\u0370-\u037D]|[\u037F-\u1FFF]|[\u200C-\u200D]|[\u2070-\u218F]|[\u2C00-\u2FEF]|[\u3001-\uD7FF]|[\uF900-\uFDCF]|[\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|-|[0-9]|\u00B7|[\u0300-\u036F]|[\u203F-\u2040]))?)?:)((((?:([A-Z]|[a-z]|[\u00C0-\u00D6]|[\u00D8-\u00F6]|[\u00F8-\u02FF]|[\u0370-\u037D]|[\u037F-\u1FFF]|[\u200C-\u200D]|[\u2070-\u218F]|[\u2C00-\u2FEF]|[\u3001-\uD7FF]|[\uF900-\uFDCF]|[\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|:|[0-9]|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))))(((((?:([A-Z]|[a-z]|[\u00C0-\u00D6]|[\u00D8-\u00F6]|[\u00F8-\u02FF]|[\u0370-\u037D]|[\u037F-\u1FFF]|[\u200C-\u200D]|[\u2070-\u218F]|[\u2C00-\u2FEF]|[\u3001-\uD7FF]|[\uF900-\uFDCF]|[\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|-|[0-9]|\u00B7|[\u0300-\u036F]|[\u203F-\u2040])|\.|:|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))))*((((?:([A-Z]|[a-z]|[\u00C0-\u00D6]|[\u00D8-\u00F6]|[\u00F8-\u02FF]|[\u0370-\u037D]|[\u037F-\u1FFF]|[\u200C-\u200D]|[\u2070-\u218F]|[\u2C00-\u2FEF]|[\u3001-\uD7FF]|[\uF900-\uFDCF]|[\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|-|[0-9]|\u00B7|[\u0300-\u036F]|[\u203F-\u2040])|:|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%)))))?)))/i,/^(?:(_:(((?:([A-Z]|[a-z]|[\u00C0-\u00D6]|[\u00D8-\u00F6]|[\u00F8-\u02FF]|[\u0370-\u037D]|[\u037F-\u1FFF]|[\u200C-\u200D]|[\u2070-\u218F]|[\u2C00-\u2FEF]|[\u3001-\uD7FF]|[\uF900-\uFDCF]|[\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|[0-9])(((((?:([A-Z]|[a-z]|[\u00C0-\u00D6]|[\u00D8-\u00F6]|[\u00F8-\u02FF]|[\u0370-\u037D]|[\u037F-\u1FFF]|[\u200C-\u200D]|[\u2070-\u218F]|[\u2C00-\u2FEF]|[\u3001-\uD7FF]|[\uF900-\uFDCF]|[\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|-|[0-9]|\u00B7|[\u0300-\u036F]|[\u203F-\u2040])|\.)*(((?:([A-Z]|[a-z]|[\u00C0-\u00D6]|[\u00D8-\u00F6]|[\u00F8-\u02FF]|[\u0370-\u037D]|[\u037F-\u1FFF]|[\u200C-\u200D]|[\u2070-\u218F]|[\u2C00-\u2FEF]|[\u3001-\uD7FF]|[\uF900-\uFDCF]|[\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|-|[0-9]|\u00B7|[\u0300-\u036F]|[\u203F-\u2040]))?))/i,/^(?:([\?\$]((((?:([A-Z]|[a-z]|[\u00C0-\u00D6]|[\u00D8-\u00F6]|[\u00F8-\u02FF]|[\u0370-\u037D]|[\u037F-\u1FFF]|[\u200C-\u200D]|[\u2070-\u218F]|[\u2C00-\u2FEF]|[\u3001-\uD7FF]|[\uF900-\uFDCF]|[\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|[0-9])(((?:([A-Z]|[a-z]|[\u00C0-\u00D6]|[\u00D8-\u00F6]|[\u00F8-\u02FF]|[\u0370-\u037D]|[\u037F-\u1FFF]|[\u200C-\u200D]|[\u2070-\u218F]|[\u2C00-\u2FEF]|[\u3001-\uD7FF]|[\uF900-\uFDCF]|[\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|[0-9]|\u00B7|[\u0300-\u036F]|[\u203F-\u2040])*)))/i,/^(?:(@[a-zA-Z]+(-[a-zA-Z0-9]+)*))/i,/^(?:([0-9]+))/i,/^(?:([0-9]*\.[0-9]+))/i,/^(?:([0-9]+\.[0-9]*([eE][+-]?[0-9]+)|\.([0-9])+([eE][+-]?[0-9]+)|([0-9])+([eE][+-]?[0-9]+)))/i,/^(?:(\+([0-9]+)))/i,/^(?:(\+([0-9]*\.[0-9]+)))/i,/^(?:(\+([0-9]+\.[0-9]*([eE][+-]?[0-9]+)|\.([0-9])+([eE][+-]?[0-9]+)|([0-9])+([eE][+-]?[0-9]+))))/i,/^(?:(-([0-9]+)))/i,/^(?:(-([0-9]*\.[0-9]+)))/i,/^(?:(-([0-9]+\.[0-9]*([eE][+-]?[0-9]+)|\.([0-9])+([eE][+-]?[0-9]+)|([0-9])+([eE][+-]?[0-9]+))))/i,/^(?:([eE][+-]?[0-9]+))/i,/^(?:('(([^\u0027\u005C\u000A\u000D])|(\\[tbnrf\\\"']|\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*'))/i,/^(?:("(([^\u0022\u005C\u000A\u000D])|(\\[tbnrf\\\"']|\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*"))/i,/^(?:('''(('|'')?([^'\\]|(\\[tbnrf\\\"']|\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))))*'''))/i,/^(?:("""(("|"")?([^\"\\]|(\\[tbnrf\\\"']|\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))))*"""))/i,/^(?:(\((\u0020|\u0009|\u000D|\u000A)*\)))/i,/^(?:(\[(\u0020|\u0009|\u000D|\u000A)*\]))/i,/^(?:$)/i,/^(?:.)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = SparqlParser;
exports.Parser = SparqlParser.Parser;
exports.parse = function () { return SparqlParser.parse.apply(SparqlParser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}