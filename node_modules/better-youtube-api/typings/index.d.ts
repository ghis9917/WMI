import { Video, Channel, Playlist, YTComment } from './entities';
import { OAuth } from './oauth';
export * from './entities';
export * from './types';
/**
 * The main class used to interact with the YouTube API. Use this.
 */
export declare class YouTube {
    private _shouldCache;
    private _cacheSearches;
    private _cacheTTL;
    private _token;
    token: string;
    tokenType: 'key' | 'oauth';
    oauth: OAuth;
    /**
     *
     * @param token Your YouTube Data API v3 token. Don't share this with anybody.
     * It could be an API key or an OAuth 2.0 token.
     * @param options Caching options. Recommended to change.
     */
    constructor(token: string, options?: YouTubeOptions);
    _cache(id: string, value: any): void;
    /**
     * Search videos on YouTube.
     * @param searchTerm What to search for on YouTube.
     * @param maxResults The maximum amount of results to find. Defaults to 10.
     */
    searchVideos(searchTerm: string, maxResults?: number): Promise<Video[]>;
    /**
     * Search channels on YouTube.
     * @param searchTerm What to search for on YouTube.
     * @param maxResults The maximum amount of results to find. Defaults to 10.
     */
    searchChannels(searchTerm: string, maxResults?: number): Promise<Channel[]>;
    /**
     * Search playlists on YouTube.
     * @param searchTerm What to search for on YouTube.
     * @param maxResults The maximum amount of results to find. Defaults to 10.
     */
    searchPlaylists(searchTerm: string, maxResults?: number): Promise<Playlist[]>;
    /**
     * Get a video object from the ID of a video.
     * @param id The ID of the video.
     */
    getVideo(id: string): Promise<Video>;
    /**
     * Get a channel object from the ID of a channel.
     * @param id The ID of the channel.
     */
    getChannel(id: string): Promise<Channel>;
    /**
     * Get a playlist object from the ID of a playlist.
     * @param id The ID of the playlist.
     */
    getPlaylist(id: string): Promise<Playlist>;
    /**
     * Get a comment object from the ID of a comment.
     * @param id The ID of the comment.
     */
    getComment(id: string): Promise<YTComment>;
    /**
     * Get a video object from the url of a video.
     * @param url The url of the video.
     */
    getVideoByUrl(url: string): Promise<Video>;
    /**
     * Get a channel object from the url of a channel.
     * @param url The url of the channel.
     */
    getChannelByUrl(url: string): Promise<Channel>;
    /**
     * Get a playlist object from the url of a playlist.
     * @param url The url of the playlist.
     */
    getPlaylistByUrl(url: string): Promise<Playlist>;
    /**
     * Get `maxResults` videos in a playlist. Used mostly internally with `Playlist#fetchVideos`.
     * @param playlistId The ID of the playlist.
     * @param maxResults The maximum amount of videos to get from the playlist. If <= 0 or not included, returns all videos in the playlist.
     */
    getPlaylistItems(playlistId: string, maxResults?: number): Promise<Video[]>;
    /**
     * Get `maxResults` comments from a video. Used mostly internally with `Video#fetchComments`.
     * @param videoId The ID of the video.
     * @param maxResults The maximum amount of comments to get from the video. If <= 0 or not included, returns all comments on the video.
     */
    getVideoComments(videoId: string, maxResults?: number): Promise<YTComment[]>;
    /**
     * Get `maxResults` comments from a channel's discussion tab. Used mostly internally with `Channel#fetchComments`.
     * @param channelId The ID of the channel.
     * @param maxResults The maximum amount of comments to get from the channel. If <= 0 or not included, returns all comments on the channel.
     */
    getChannelComments(channelId: string, maxResults?: number): Promise<YTComment[]>;
    /**
     * Get `maxResults` replies to a comment. Used mostly internally with `Comment#fetchReplies`.
     * @param commentId The ID of the comment to get replies from.
     * @param maxResults The maximum amount of replies to get. Gets all replies if <= 0 or not included.
     */
    getCommentReplies(commentId: string, maxResults?: number): Promise<YTComment[]>;
    private search;
    private getItemById;
    private getPaginatedItems;
}
declare type YouTubeOptions = {
    /**
     * Whether or not to cache entities.
     */
    cache?: boolean;
    /**
     * How long to cache entities in seconds (0 = unlimited).
     */
    cacheTTL?: number;
    /**
     * How often to check for and delete expired cached items in seconds.
     */
    cacheCheckInterval?: number;
    /**
     * Whether or not we should cache searches
     */
    cacheSearches?: boolean;
};
export default YouTube;
