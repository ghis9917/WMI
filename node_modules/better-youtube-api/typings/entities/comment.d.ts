import { YouTube } from '..';
export declare class YTComment {
    /**
     * The name of the endpoint used for this entity.
     */
    static endpoint: string;
    /**
     * The parts to request for this entity.
     */
    static part: string;
    /**
     * The YouTube object used to create the comment.
     */
    youtube: YouTube;
    /**
     * The raw data from the YouTube API of the comment.
     */
    data: any;
    /**
     * The comment's unique YouTube ID.
     */
    id: string;
    /**
     * Whether or not this a full comment object.
     */
    full: true;
    /**
     * The comment's author.
     */
    author: {
        /**
         * The author's YouTube username. May not be unique.
         */
        username: string;
        /**
         * The author's avatar URL.
         */
        avatar: string;
        /**
         * The author's channel ID.
         */
        channelId: string;
        /**
         * The author's channel URL.
         */
        channelUrl: string;
    };
    /**
     * The comment's content.
     */
    text: {
        /**
         * What YouTube displays to the user viewing the comment.
         */
        displayed: string;
        /**
         * The comment's plain text.
         */
        original: string;
    };
    /**
     * Whether or not you can like/dislike the comment.
     */
    rateable: boolean;
    /**
     * Either YouTube thinks it's popular, or it has at least 100 likes.
     */
    popular: boolean;
    /**
     * The number of likes the comment has received.
     */
    likes: number;
    /**
     * The url of the comment.
     */
    url?: string;
    /**
     * The date the comment was published.
     */
    datePublished: Date;
    /**
     * Either the date the comment was last edited, or the date it was
     * posted.
     */
    dateEdited: Date;
    /**
     * Either the ID of the video that it is commenting on, the ID of the
     * comment it is replying to, or the ID of the channel it is commenting
     * on.
     * Undefined whenever the comment is fetched directly using the ID.
     */
    parentId: string;
    /**
     * Replies directed to the comment. If the comment was fetched from a video,
     * then this will be partially filled. You'll need to use Comment#fetchReplies
     * to get all of the replies, though.
     */
    replies: YTComment[];
    constructor(youtube: YouTube, data: any, type: 'video' | 'channel');
    private _init;
    /**
     * Edits the comment.
     * Must be using an access token with correct scopes.
     * @param text The new text of the comment.
     */
    edit(text: string): Promise<YTComment>;
    /**
     * Fetches replies to the comment.
     * @param maxResults The maximum amount of replies to fetch. Fetches all comments if not included
     * or less than 0.
     */
    fetchReplies(maxResults?: number): Promise<YTComment[]>;
}
