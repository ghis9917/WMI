{"version":3,"sources":["../src/util/request.ts"],"names":[],"mappings":";;AAAA,iCAAwC;AAExC,6BAAuC;AAE1B,QAAA,OAAO,GAAG;IACrB,GAAG,EAAE,CAAC,MAAc,EAAE,MAAc,EAAE,KAAa,EAAE,IAAqB,EAAgB,EAAE;QAC1F,0BAA0B;QAC1B,MAAM,GAAG,GAAG,uCAAuC,GAAG,CAAC,MAAM,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,MAAM,GAAG,WAAW,CAAC,MAAM,CAAC;YAC5G,CAAC,IAAI,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,QAAQ,KAAK,EAAE,CAAC,CAAC,CAAC,QAAQ,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAA;QAChF,0BAA0B;QAC1B,OAAO,GAAG,CAAC,GAAG,EAAE,IAAI,KAAK,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,SAAS,CAAC,CAAA;IACvD,CAAC;IACD,IAAI,EAAE,CAAC,MAAc,EAAE,MAAc,EAAE,KAAa,EAAE,IAAS,EAAgB,EAAE;QAC/E,0BAA0B;QAC1B,MAAM,GAAG,GAAG,uCAAuC,GAAG,CAAC,MAAM,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,MAAM,GAAG,WAAW,CAAC,MAAM,CAAC,CAAA;QACxH,0BAA0B;QAC1B,OAAO,IAAI,CAAC,GAAG,EAAE,IAAI,EAAE,KAAK,CAAC,CAAA;IAC/B,CAAC;IACD,GAAG,EAAE,CAAC,MAAc,EAAE,MAAc,EAAE,KAAa,EAAE,IAAS,EAAgB,EAAE;QAC9E,0BAA0B;QAC1B,MAAM,GAAG,GAAG,uCAAuC,GAAG,CAAC,MAAM,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,MAAM,GAAG,WAAW,CAAC,MAAM,CAAC,CAAA;QACxH,0BAA0B;QAC1B,OAAO,GAAG,CAAC,GAAG,EAAE,IAAI,EAAE,KAAK,CAAC,CAAA;IAC9B,CAAC;CACF,CAAA;AAED;;GAEG;AACH,0BAA0B;AAC1B,SAAS,GAAG,CAAE,GAAW,EAAE,KAAc;IACvC,MAAM,OAAO,GAAG,iBAAiB,CAAC,GAAG,EAAE,KAAK,CAAC,CAAA;IAE7C,IAAI,KAAK,EAAE;QACT,OAAO,CAAC,OAAO,CAAC,eAAe,CAAC,GAAG,UAAU,KAAK,EAAE,CAAA;KACrD;IAED,OAAO,GAAG,CAAC,OAAO,EAAE,GAAG,CAAC,EAAE,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,CAAA;AAC9C,CAAC;AAED;;GAEG;AACH,0BAA0B;AAC1B,SAAS,IAAI,CAAE,GAAW,EAAE,IAAS,EAAE,KAAa;IAClD,MAAM,OAAO,GAAG,iBAAiB,CAAC,GAAG,EAAE,MAAM,CAAC,CAAA;IAE9C,IAAI,KAAK,EAAE;QACT,OAAO,CAAC,OAAO,CAAC,eAAe,CAAC,GAAG,UAAU,KAAK,EAAE,CAAA;KACrD;IAED,OAAO,GAAG,CAAC,OAAO,EAAE,GAAG,CAAC,EAAE,CAAC,WAAW,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAA;AACpD,CAAC;AAED;;GAEG;AACH,0BAA0B;AAC1B,SAAS,GAAG,CAAE,GAAW,EAAE,IAAS,EAAE,KAAa;IACjD,MAAM,OAAO,GAAG,iBAAiB,CAAC,GAAG,EAAE,KAAK,CAAC,CAAA;IAE7C,IAAI,KAAK,EAAE;QACT,OAAO,CAAC,OAAO,CAAC,eAAe,CAAC,GAAG,UAAU,KAAK,EAAE,CAAA;KACrD;IAED,OAAO,GAAG,CAAC,OAAO,EAAE,GAAG,CAAC,EAAE,CAAC,WAAW,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAA;AACpD,CAAC;AAED;;GAEG;AACH,0BAA0B;AAC1B,SAAS,iBAAiB,CAAE,GAAW,EAAE,IAA4B;IACnE,MAAM,MAAM,GAAG,WAAQ,CAAC,GAAG,CAAC,CAAA;IAE5B,OAAO;QACL,QAAQ,EAAE,MAAM,CAAC,QAAQ;QACzB,IAAI,EAAE,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG;QACrC,IAAI,EAAE,MAAM,CAAC,IAAI;QACjB,MAAM,EAAE,IAAI;QACZ,OAAO,EAAE;YACP,cAAc,EAAE,kBAAkB;SACnC;KACF,CAAA;AACH,CAAC;AAED;;GAEG;AACH,0BAA0B;AAC1B,SAAS,GAAG,CAAE,OAAuB,EAAE,WAA2C;IAChF,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;QACrC,MAAM,EAAE,GAAG,CAAC,GAAoB,EAAE,EAAE;YAClC,IAAI,IAAI,GAAG,EAAE,CAAA;YAEb,GAAG,CAAC,WAAW,CAAC,MAAM,CAAC,CAAA;YAEvB,GAAG,CAAC,EAAE,CAAC,MAAM,EAAE,KAAK,CAAC,EAAE;gBACrB,IAAI,IAAI,KAAK,CAAA;YACf,CAAC,CAAC,CAAA;YAEF,GAAG,CAAC,EAAE,CAAC,KAAK,EAAE,GAAG,EAAE;gBACjB,IAAI,GAAG,CAAC,UAAU,KAAK,GAAG,EAAE;oBAC1B,OAAO,MAAM,CAAC,IAAI,KAAK,CAAC,WAAW,CAAC,CAAC,CAAA;iBACtC;gBAED,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAA;gBAE/B,IAAI,MAAM,CAAC,KAAK,EAAE;oBAChB,OAAO,MAAM,CAAC,IAAI,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAA;iBAC/C;gBAED,OAAO,OAAO,CAAC,MAAM,CAAC,CAAA;YACxB,CAAC,CAAC,CAAA;YAEF,GAAG,CAAC,EAAE,CAAC,OAAO,EAAE,KAAK,CAAC,EAAE;gBACtB,OAAO,MAAM,CAAC,KAAK,CAAC,CAAA;YACtB,CAAC,CAAC,CAAA;QACJ,CAAC,CAAA;QAED,WAAW,CAAC,eAAK,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,CAAA;IACjC,CAAC,CAAC,CAAA;AACJ,CAAC;AAED;;GAEG;AACH,0BAA0B;AAC1B,SAAS,WAAW,CAAE,GAAoB,EAAE,IAAU;IACpD,GAAG,CAAC,EAAE,CAAC,OAAO,EAAE,KAAK,CAAC,EAAE;QACtB,MAAM,KAAK,CAAA;IACb,CAAC,CAAC,CAAA;IAEF,IAAI,IAAI,EAAE;QACR,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,CAAA;KAChB;IAED,GAAG,CAAC,GAAG,EAAE,CAAA;AACX,CAAC;AAED;;GAEG;AACH,0BAA0B;AAC1B,SAAS,WAAW,CAAE,MAAc;IAClC,IAAI,GAAG,GAAG,EAAE,CAAA;IAEZ,KAAK,IAAI,KAAK,IAAI,MAAM,EAAE;QACxB,GAAG,IAAI,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,KAAK,GAAG,GAAG,GAAG,MAAM,CAAC,KAAK,CAAC,CAAA;KACtE;IAED,OAAO,GAAG,CAAA;AACZ,CAAC","file":"request.js","sourcesContent":["import { request as https } from 'https'\nimport { IncomingMessage, RequestOptions, OutgoingMessage } from 'http'\nimport { parse as parseUrl } from 'url'\n\nexport const request = {\n  api: (subUrl: string, params: Object, token: string, type: 'key' | 'oauth'): Promise<any> => {\n    /* istanbul ignore next */\n    const url = 'https://www.googleapis.com/youtube/v3' + (subUrl.startsWith('/') ? '' : '/') + subUrl + parseParams(params) +\n                (type === 'key' ? (params ? `&key=${token}` : `?key=${token}`) : '')\n    /* istanbul ignore next */\n    return get(url, type === 'oauth' ? token : undefined)\n  },\n  post: (subUrl: string, params: Object, token: string, data: any): Promise<any> => {\n    /* istanbul ignore next */\n    const url = 'https://www.googleapis.com/youtube/v3' + (subUrl.startsWith('/') ? '' : '/') + subUrl + parseParams(params)\n    /* istanbul ignore next */\n    return post(url, data, token)\n  },\n  put: (subUrl: string, params: Object, token: string, data: any): Promise<any> => {\n    /* istanbul ignore next */\n    const url = 'https://www.googleapis.com/youtube/v3' + (subUrl.startsWith('/') ? '' : '/') + subUrl + parseParams(params)\n    /* istanbul ignore next */\n    return put(url, data, token)\n  }\n}\n\n/**\n * @ignore\n */\n/* istanbul ignore next */\nfunction get (url: string, token?: string): Promise<any> {\n  const options = parseUrlToOptions(url, 'GET')\n\n  if (token) {\n    options.headers['Authorization'] = `Bearer ${token}`\n  }\n\n  return req(options, req => reqCallback(req))\n}\n\n/**\n * @ignore\n */\n/* istanbul ignore next */\nfunction post (url: string, data: any, token: string): Promise<any> {\n  const options = parseUrlToOptions(url, 'POST')\n\n  if (token) {\n    options.headers['Authorization'] = `Bearer ${token}`\n  }\n\n  return req(options, req => reqCallback(req, data))\n}\n\n/**\n * @ignore\n */\n/* istanbul ignore next */\nfunction put (url: string, data: any, token: string): Promise<any> {\n  const options = parseUrlToOptions(url, 'PUT')\n\n  if (token) {\n    options.headers['Authorization'] = `Bearer ${token}`\n  }\n\n  return req(options, req => reqCallback(req, data))\n}\n\n/**\n * @ignore\n */\n/* istanbul ignore next */\nfunction parseUrlToOptions (url: string, type: 'POST' | 'PUT' | 'GET'): RequestOptions {\n  const parsed = parseUrl(url)\n\n  return {\n    hostname: parsed.hostname,\n    port: parsed.port ? parsed.port : 443,\n    path: parsed.path,\n    method: type,\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }\n}\n\n/**\n * @ignore\n */\n/* istanbul ignore next */\nfunction req (options: RequestOptions, reqFunction: (req: OutgoingMessage) => void) {\n  return new Promise((resolve, reject) => {\n    const cb = (res: IncomingMessage) => {\n      let data = ''\n\n      res.setEncoding('utf8')\n\n      res.on('data', chunk => {\n        data += chunk\n      })\n\n      res.on('end', () => {\n        if (res.statusCode === 404) {\n          return reject(new Error('Not found'))\n        }\n\n        const parsed = JSON.parse(data)\n\n        if (parsed.error) {\n          return reject(new Error(parsed.error.message))\n        }\n\n        return resolve(parsed)\n      })\n\n      res.on('error', error => {\n        return reject(error)\n      })\n    }\n\n    reqFunction(https(options, cb))\n  })\n}\n\n/**\n * @ignore\n */\n/* istanbul ignore next */\nfunction reqCallback (req: OutgoingMessage, data?: any) {\n  req.on('error', error => {\n    throw error\n  })\n\n  if (data) {\n    req.write(data)\n  }\n\n  req.end()\n}\n\n/**\n * @ignore\n */\n/* istanbul ignore next */\nfunction parseParams (params: Object) {\n  let url = ''\n\n  for (let param in params) {\n    url += (!url.includes('?') ? '?' : '&') + param + '=' + params[param]\n  }\n\n  return url\n}\n"],"sourceRoot":"../../src"}