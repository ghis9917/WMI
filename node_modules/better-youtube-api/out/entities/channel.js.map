{"version":3,"sources":["../src/entities/channel.ts"],"names":[],"mappings":"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","file":"channel.js","sourcesContent":["import { YouTube, Playlist, Thumbnail } from '..'\nimport { YTComment } from './comment'\n\n/**\n * A YouTube channel.\n */\nexport class Channel {\n  /**\n   * The name of the endpoint used for this entity.\n   */\n  public static endpoint = 'channels'\n\n  /**\n   * The parts to request for this entity.\n   */\n  public static part = 'snippet,contentDetails,statistics,status'\n\n  /**\n   * The YouTube object that created this channel object.\n   */\n  public youtube: YouTube\n\n  /**\n   * Whether or not this a full channel object.\n   */\n  public full: boolean\n\n  /**\n   * The raw data of this channel.\n   */\n  public data: any\n\n  /**\n   * The name of this channel.\n   */\n  public name: string\n\n  /**\n   * The description of this channel.\n   */\n  public about: string\n\n  /**\n   * The ID of this channel.\n   */\n  public id: string\n\n  /**\n   * The country this channel is based in.\n   */\n  public country: string\n\n  /**\n   * The url of the channel.\n   */\n  public url: string\n\n  /**\n   * This channel's custom URL, if they have one.\n   */\n  public customUrl: string\n\n  /**\n   * This channel's profile pictures.\n   */\n  public profilePictures: {\n    default?: Thumbnail,\n    high?: Thumbnail,\n    maxres?: Thumbnail\n    medium?: Thumbnail,\n    standard?: Thumbnail\n  }\n\n  /**\n   * The date this channel was created.\n   */\n  public dateCreated: Date\n\n  /**\n   * The default language for this channel's uploads.\n   */\n  public language: string\n\n  /**\n   * This channel's view count.\n   */\n  public views: number\n\n  /**\n   * The channel's uploads. Only available after calling `Channel#fetchVideos()`\n   */\n  public videos: Playlist\n\n  /**\n   * The number of subscribers this channel has. `-1` if the subcount is hidden.\n   */\n  public subCount: number\n\n  /**\n   * This channel's comment count.\n   */\n  public commentCount: number\n\n  /**\n   * The channel's comments. Only defined when Channel#fetchComments is called.\n   */\n  public comments: YTComment[]\n\n  constructor (youtube: YouTube, data) {\n    this.youtube = youtube\n    this.data = data\n\n    this._init(data)\n  }\n\n  private _init (data) {\n\n    if (data.kind === 'youtube#channel' && data.status.isLinked) {\n      const channel = data\n\n      this.id = channel.id\n      this.country = channel.snippet.country\n      this.language = channel.snippet.defaultLanguage\n      this.views = Number(channel.statistics.viewCount)\n      this.commentCount = Number(channel.statistics.commentCount)\n      if (!channel.statistics.hiddenSubscriberCount) {\n        this.subCount = Number(channel.statistics.subscriberCount)\n      } else {\n        this.subCount = -1\n      }\n    } else if (data.kind === 'youtube#searchResult') {\n      this.id = data.id.channelId\n    } else {\n      throw new Error(`Invalid channel type: ${data.kind}`)\n    }\n\n    this.url = `https://youtube.com/channel/${this.id}`\n    this.profilePictures = data.snippet.thumbnails\n    this.dateCreated = new Date(data.snippet.publishedAt)\n    this.name = data.snippet.title\n    this.about = data.snippet.description\n    this.full = data.kind === 'youtube#channel'\n  }\n\n  /**\n   * Posts a comment on the channel's discussion tab.\n   * Must be using an access token with correct scopes.\n   * @param text The text of the comment.\n   */\n  /* istanbul ignore next */\n  public async postComment (text: string) {\n    const comment = await this.youtube.oauth.postComment(text, this.id)\n\n    if (this.comments !== undefined) {\n      this.comments.push(comment)\n    } else {\n      this.comments = [ comment ]\n    }\n\n    return comment\n  }\n\n  /**\n   * Fetches this channel and reassigns this object to the new channel object.\n   * Only useful if `this.full` is false, or if you want updated channel info.\n   */\n  public async fetch () {\n    const channel = await this.youtube.getChannel(this.id)\n    return Object.assign(this, channel)\n  }\n\n  /**\n   * Fetches the channel's videos and assigns them to the `Channel#videos` property.\n   */\n  public async fetchVideos () {\n    if (!(this.data.contentDetails)) {\n      await this.fetch()\n    }\n\n    const videos = await this.youtube.getPlaylist(this.data.contentDetails.relatedPlaylists.uploads)\n    this.videos = videos\n\n    return this.videos\n  }\n\n  /**\n   * Fetches the channels's discussion tab comments and assigns them to Channel#comments.\n   * @param maxResults The maximum amount of comments to fetch\n   */\n  public async fetchComments (maxResults: number = -1) {\n    this.comments = await this.youtube.getChannelComments(this.id, maxResults)\n    return this.comments\n  }\n}\n"],"sourceRoot":"../../src"}