{"version":3,"sources":["../src/oauth.ts"],"names":[],"mappings":"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","file":"oauth.js","sourcesContent":["/* istanbul ignore file */\r\n/* We ignore this file because OAuth endpoints are too taxing to test, they are instead manually tested. */\r\n\r\nimport YouTube from '.'\r\nimport { request } from './util'\r\nimport { YTComment } from './entities'\r\nimport { CommentThreadData } from './constants'\r\n\r\nexport class OAuth {\r\n  public youtube: YouTube\r\n\r\n  /**\r\n   *\r\n   * @param youtube The YouTube object to retrieve the token from.\r\n   */\r\n  constructor (youtube: YouTube) {\r\n    this.youtube = youtube\r\n  }\r\n\r\n  public checkTokenAndThrow () {\r\n    if (this.youtube.tokenType !== 'oauth') {\r\n      throw new Error('Token is not an oauth token')\r\n    }\r\n  }\r\n\r\n  // tslint:disable:no-trailing-whitespace\r\n  /**\r\n   * Post a comment on a video or channel discussion.  \r\n   * Last tested 09/26/2019 06:02. PASSING\r\n   * @param text The text content of the comment.\r\n   * @param channelId The channel to post the comment on.\r\n   * @param videoId The video of the channel to post the comment on.\r\n   * If falsey, the comment will be posted to the channel discussion.\r\n   */\r\n  // tslint:enable:no-trailing-whitespace\r\n  public async postComment (text: string, channelId: string, videoId?: string): Promise<YTComment> {\r\n    this.checkTokenAndThrow()\r\n\r\n    if (text === undefined || text === null || text.trim() === '') {\r\n      return Promise.reject('Invalid comment text')\r\n    }\r\n\r\n    const data: typeof CommentThreadData = JSON.parse(JSON.stringify(CommentThreadData))\r\n    data.snippet.topLevelComment.snippet.textOriginal = text\r\n    data.snippet.channelId = channelId\r\n\r\n    if (videoId) {\r\n      data.snippet.videoId = videoId\r\n    }\r\n\r\n    const result = await this.sendData('post', 'commentThreads', 'snippet', data)\r\n    const type = result.snippet.channelId ? 'channel' : 'video'\r\n    return new YTComment(this.youtube, result.snippet.topLevelComment, type)\r\n  }\r\n\r\n  // tslint:disable:no-trailing-whitespace\r\n  /**\r\n   * Edit a comment on a video or channel discussion.  \r\n   * Last tested 09/26/2019 06:23. PASSING\r\n   * @param text The new text content of the comment.\r\n   * @param commentId The ID of the comment.\r\n   */\r\n  // tslint:enable:no-trailing-whitespace\r\n  public async editComment (text: string, commentId: string): Promise<YTComment> {\r\n    this.checkTokenAndThrow()\r\n\r\n    if (text === undefined || text === null || text.trim() === '') {\r\n      return Promise.reject('Invalid comment text')\r\n    }\r\n\r\n    const data: typeof CommentThreadData = JSON.parse(JSON.stringify(CommentThreadData))\r\n    data.snippet.topLevelComment.snippet.textOriginal = text\r\n    data.id = commentId\r\n\r\n    const result = await this.sendData('put', 'commentThreads', 'snippet', data)\r\n    const type = result.snippet.channelId ? 'channel' : 'video'\r\n    const comment = new YTComment(this.youtube, result.snippet.topLevelComment, type)\r\n\r\n    if (result.replies) {\r\n      result.replies.comments.forEach(reply => {\r\n        const created = new YTComment(this.youtube, reply, type)\r\n        comment.replies.push(created)\r\n      })\r\n    }\r\n\r\n    return comment\r\n  }\r\n\r\n  private sendData (type: 'post' | 'put', endpoint: string, part: string, data: any) {\r\n    return request[type](endpoint, { part }, this.youtube.token, JSON.stringify(data))\r\n  }\r\n}\r\n"],"sourceRoot":"../src"}