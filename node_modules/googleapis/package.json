{
  "_from": "googleapis",
  "_id": "googleapis@46.0.0",
  "_inBundle": false,
  "_integrity": "sha512-MOA6Qpu0jQfdnWZEyoAfW6duhWZxZxgrIzOtxNmsSj0WgLfot2s0vcAAq7MtCo1OX+/SduCsdJjCzq2tmhuxFw==",
  "_location": "/googleapis",
  "_phantomChildren": {
    "arrify": "2.0.1",
    "base64-js": "1.3.1",
    "buffer-equal-constant-time": "1.0.1",
    "ecdsa-sig-formatter": "1.0.11",
    "fast-text-encoding": "1.0.0",
    "gaxios": "2.2.0",
    "gcp-metadata": "3.3.0",
    "safe-buffer": "5.2.0"
  },
  "_requested": {
    "escapedName": "googleapis",
    "fetchSpec": "latest",
    "name": "googleapis",
    "raw": "googleapis",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/googleapis/-/googleapis-46.0.0.tgz",
  "_shasum": "ca261c6e2484adab1accdefb859fb31980e4f1b7",
  "_spec": "googleapis",
  "_where": "C:\\Users\\riccardo\\Desktop\\riccardo\\WMI-smogBranch",
  "author": {
    "name": "Google Inc."
  },
  "bugs": {
    "url": "https://github.com/googleapis/google-api-nodejs-client/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "google-auth-library": "^5.6.1",
    "googleapis-common": "^3.2.0"
  },
  "deprecated": false,
  "description": "Google APIs Client Library for Node.js",
  "devDependencies": {
    "@compodoc/compodoc": "^1.1.10",
    "@types/chai": "^4.1.7",
    "@types/execa": "^0.9.0",
    "@types/minimist": "^1.2.0",
    "@types/mkdirp": "^0.5.2",
    "@types/mocha": "^5.2.6",
    "@types/mv": "^2.1.0",
    "@types/ncp": "^2.0.1",
    "@types/node": "^12.0.1",
    "@types/nunjucks": "^3.1.1",
    "@types/qs": "^6.5.3",
    "@types/rimraf": "^2.0.2",
    "@types/source-map-support": "^0.5.0",
    "@types/tmp": "^0.1.0",
    "@types/url-template": "^2.0.28",
    "assert-rejects": "^1.0.0",
    "c8": "^6.0.0",
    "chai": "^4.2.0",
    "codecov": "^3.4.0",
    "eslint": "^6.0.0",
    "eslint-config-prettier": "^6.0.0",
    "eslint-plugin-node": "^10.0.0",
    "eslint-plugin-prettier": "^3.1.0",
    "execa": "^3.0.0",
    "gts": "^1.1.0",
    "hard-rejection": "^2.1.0",
    "intelli-espower-loader": "^1.0.1",
    "js-green-licenses": "^1.0.0",
    "linkinator": "^1.5.0",
    "minimist": "^1.2.0",
    "mkdirp": "^0.5.1",
    "mocha": "^6.1.4",
    "mv": "^2.1.1",
    "ncp": "^2.0.0",
    "nock": "^11.3.2",
    "nunjucks": "^3.2.0",
    "open": "^7.0.0",
    "p-queue": "^6.0.0",
    "prettier": "^1.17.1",
    "rimraf": "^3.0.0",
    "server-destroy": "^1.0.1",
    "source-map-support": "^0.5.12",
    "tmp": "^0.1.0",
    "typescript": "3.6.4"
  },
  "engines": {
    "node": ">=8.10.0"
  },
  "files": [
    "!build/src/**/*.map",
    "build/src"
  ],
  "homepage": "https://github.com/googleapis/google-api-nodejs-client#readme",
  "keywords": [
    "api",
    "client",
    "client library",
    "google",
    "google apis"
  ],
  "license": "Apache-2.0",
  "main": "./build/src/index.js",
  "name": "googleapis",
  "optionalDependencies": {},
  "readme": "<img src=\"https://avatars0.githubusercontent.com/u/1342004?v=3&s=96\" alt=\"Google Inc. logo\" title=\"Google\" align=\"right\" height=\"96\" width=\"96\"/>\n\n# Google APIs Node.js Client\n\n[![Release Level][releaselevelimg]][releaselevel]\n[![npm version][npmimg]][npm]\n[![Code Coverage][codecovimg]][codecov]\n[![Downloads][downloadsimg]][downloads]\n[![Dependency Status][david-image]][david-url]\n[![Known Vulnerabilities][snyk-image]][snyk-url]\n\n[Node.js][node] client library for using Google APIs. Support for authorization and authentication with OAuth 2.0, API Keys and JWT tokens is included.\n\n* [Google APIs](#google-apis)\n* [Getting started](#getting-started)\n  * [Installation](#installation)\n  * [First example](#first-example)\n  * [Samples](#samples)\n  * [API Reference](#api-reference)\n* [Authentication and authorization](#authentication-and-authorization)\n  * [OAuth2 client](#oauth2-client)\n  * [Using API keys](#using-api-keys)\n  * [Service <--> Service authentication](#service-to-service-authentication)\n  * [Setting global or service-level auth](#setting-global-or-service-level-auth)\n* [Usage](#usage)\n  * [Specifying request body](#specifying-request-body)\n  * [Media uploads](#media-uploads)\n  * [Request Options](#request-options)\n  * [Using a Proxy](#using-a-proxy)\n  * [Supported APIs](#getting-supported-apis)\n  * [TypeScript](#typescript)\n* [License](#license)\n* [Contributing](#contributing)\n* [Questions/problems?](#questionsproblems)\n\n## Google APIs\nThe full list of supported APIs can be found on the [Google APIs Explorer][apiexplorer]. The API endpoints are automatically generated, so if the API is not in the list, it is currently not supported by this API client library.\n\n### Working with Google Cloud Platform APIs?\nIf you're working with [Google Cloud Platform][cloudplatform] APIs such as Datastore, Cloud Storage or Pub/Sub, consider using the [`@google-cloud`][googlecloud] client libraries: single purpose idiomatic Node.js clients for Google Cloud Platform services.\n\n### Support and maintenance\nThese client libraries are officially supported by Google. However, these libraries are considered complete and are in maintenance mode. This means that we will address critical bugs and security issues but will not add any new features. For Google Cloud Platform APIs, we recommend using [google-cloud-node](https://github.com/GoogleCloudPlatform/google-cloud-node) which is under active development.\n\nThis library supports the maintenance LTS, active LTS, and current release of node.js.  See the [node.js release schedule](https://github.com/nodejs/Release) for more information.\n\n## Getting started\n\n### Installation\nThis library is distributed on `npm`. In order to add it as a dependency, run the following command:\n\n``` sh\n$ npm install googleapis\n```\n\n### First example\nThis is a very simple example. This creates a Blogger client and retrieves the details of a blog given the blog Id:\n\n``` js\nconst {google} = require('googleapis');\n\n// Each API may support multiple version. With this sample, we're getting\n// v3 of the blogger API, and using an API key to authenticate.\nconst blogger = google.blogger({\n  version: 'v3',\n  auth: 'YOUR API KEY'\n});\n\nconst params = {\n  blogId: '3213900'\n};\n\n// get the blog details\nblogger.blogs.get(params, (err, res) => {\n  if (err) {\n    console.error(err);\n    throw err;\n  }\n  console.log(`The blog url is ${res.data.url}`);\n});\n```\n\nInstead of using callbacks you can also use promises!\n\n``` js\nblogger.blogs.get(params)\n  .then(res => {\n    console.log(`The blog url is ${res.data.url}`);\n  })\n  .catch(error => {\n    console.error(error);\n  });\n```\n\nOr async/await:\n\n``` js\nasync function runSample() {\n  const res = await blogger.blogs.get(params);\n  console.log(`The blog url is ${res.data.url}`);\n}\nrunSample().catch(console.error);\n```\n\n### Samples\nThere are a lot of [samples](https://github.com/googleapis/google-api-nodejs-client/tree/master/samples) ðŸ¤—  If you're trying to figure out how to use an API ... look there first! If there's a sample you need missing, feel free to file an [issue][bugs].\n\n### API Reference\nThis library has a full set of [API Reference Documentation](https://googleapis.dev/nodejs/googleapis/latest). This documentation is auto-generated, and the location may change.\n\n## Authentication and authorization\nThere are three primary ways to authenticate to Google APIs. Some service support all authentication methods, other may only support one or two.\n\n- **OAuth2** - This allows you to make API calls on behalf of a given user.  In this model, the user visits your application, signs in with their Google account, and provides your application with authorization against a set of scopes.  [Learn more](#oauth2-client).\n\n- **Service <--> Service** - In this model, your application talks directly to Google APIs using a Service Account.  It's useful when you have a backend application that will talk directly to Google APIs from the backend. [Learn more](#service-to-service-authentication).\n\n- **API Key** - With an API key, you can access your service from a client or the server.  Typically less secure, this is only available on a small subset of services with limited scopes.  [Learn more](#using-api-keys).\n\nTo learn more about the authentication client, see the [Google Auth Library](https://github.com/googleapis/google-auth-library-nodejs).\n\n### OAuth2 client\nThis client comes with an [OAuth2][oauth] client that allows you to retrieve an access token, refresh it, and retry the request seamlessly. The basics of Google's OAuth2 implementation is explained on [Google Authorization and Authentication documentation][authdocs].\n\nIn the following examples, you may need a `CLIENT_ID`, `CLIENT_SECRET` and `REDIRECT_URL`. You can find these pieces of information by going to the [Developer Console][devconsole], clicking your project --> APIs & auth --> credentials.\n\nFor more information about OAuth2 and how it works, [see here][oauth].\n\nA complete sample application that authorizes and authenticates with the OAuth2 client is available at [`samples/oauth2.js`][oauthexample].\n\n#### Generating an authentication URL\n\nTo ask for permissions from a user to retrieve an access token, you redirect them to a consent page. To create a consent page URL:\n\n``` js\nconst {google} = require('googleapis');\n\nconst oauth2Client = new google.auth.OAuth2(\n  YOUR_CLIENT_ID,\n  YOUR_CLIENT_SECRET,\n  YOUR_REDIRECT_URL\n);\n\n// generate a url that asks permissions for Blogger and Google Calendar scopes\nconst scopes = [\n  'https://www.googleapis.com/auth/blogger',\n  'https://www.googleapis.com/auth/calendar'\n];\n\nconst url = oauth2Client.generateAuthUrl({\n  // 'online' (default) or 'offline' (gets refresh_token)\n  access_type: 'offline',\n\n  // If you only need one scope you can pass it as a string\n  scope: scopes\n});\n```\n\n**IMPORTANT NOTE** - The `refresh_token` is only returned on the first authorization. More details [here](https://github.com/googleapis/google-api-nodejs-client/issues/750#issuecomment-304521450).\n\n#### Retrieve authorization code\n\nOnce a user has given permissions on the consent page, Google will redirect the page to the redirect URL you have provided with a code query parameter.\n\n    GET /oauthcallback?code={authorizationCode}\n\n#### Retrieve access token\n\nWith the code returned, you can ask for an access token as shown below:\n\n``` js\n// This will provide an object with the access_token and refresh_token.\n// Save these somewhere safe so they can be used at a later time.\nconst {tokens} = await oauth2Client.getToken(code)\noauth2Client.setCredentials(tokens);\n```\n\nWith the credentials set on your OAuth2 client - you're ready to go!\n\n#### Handling refresh tokens\nAccess tokens expire. This library will automatically use a refresh token to obtain a new access token if it is about to expire. An easy way to make sure you always store the most recent tokens is to use the `tokens` event:\n\n```js\noauth2Client.on('tokens', (tokens) => {\n  if (tokens.refresh_token) {\n    // store the refresh_token in my database!\n    console.log(tokens.refresh_token);\n  }\n  console.log(tokens.access_token);\n});\n```\n\nTo set the `refresh_token` at a later time, you can use the `setCredentials` method:\n\n```js\noauth2Client.setCredentials({\n  refresh_token: `STORED_REFRESH_TOKEN`\n});\n```\n\nOnce the client has a refresh token, access tokens will be acquired and refreshed automatically in the next call to the API.\n\n### Using API keys\nYou may need to send an API key with the request you are going to make. The following uses an API key to make a request to the Blogger API service to retrieve a blog's name, url, and its total amount of posts:\n\n``` js\nconst {google} = require('googleapis');\nconst blogger = google.blogger_v3({\n  version: 'v3',\n  auth: 'YOUR_API_KEY' // specify your API key here\n});\n\nconst params = {\n  blogId: '3213900'\n};\n\nasync function main(params) {\n  const res = await blogger.blogs.get({blogId: params.blogId});\n  console.log(`${res.data.name} has ${res.data.posts.totalItems} posts! The blog url is ${res.data.url}`)\n};\n\nmain().catch(console.error);\n```\n\nTo learn more about API keys, please see the [documentation][usingkeys].\n\n#### Service to Service Authentication\n\nRather than manually creating an OAuth2 client, JWT client, or Compute client, the auth library can create the correct credential type for you, depending upon the environment your code is running under.\n\nFor example, a JWT auth client will be created when your code is running on your local developer machine, and a Compute client will be created when the same code is running on a configured instance of Google Compute Engine. The code below shows how to retrieve a default credential type, depending upon the runtime environment. \n\n```js\nconst {google} = require('googleapis');\nconst compute = google.compute('v1');\n\nasync function main () {\n  // This method looks for the GCLOUD_PROJECT and GOOGLE_APPLICATION_CREDENTIALS\n  // environment variables.\n  const auth = new google.auth.GoogleAuth({\n    // Scopes can be specified either as an array or as a single, space-delimited string.\n    scopes: ['https://www.googleapis.com/auth/compute']\n  });\n  const authClient = await auth.getClient();\n\n  // obtain the current project Id\n  const project = await auth.getProjectId();\n\n  // Fetch the list of GCE zones within a project.\n  const res = await compute.zones.list({ project, auth: authClient });\n  console.log(res.data);\n}\n\nmain().catch(console.error);\n```\n\n### Setting global or service-level auth\n\nYou can set the `auth` as a global or service-level option so you don't need to specify it every request. For example, you can set `auth` as a global option:\n\n``` js\nconst {google} = require('googleapis');\n\nconst oauth2Client = new google.auth.OAuth2(\n  YOUR_CLIENT_ID,\n  YOUR_CLIENT_SECRET,\n  YOUR_REDIRECT_URL\n);\n\n// set auth as a global default\ngoogle.options({\n  auth: oauth2Client\n});\n```\n\nInstead of setting the option globally, you can also set the authentication client at the service-level:\n\n``` js\nconst {google} = require('googleapis');\nconst oauth2Client = new google.auth.OAuth2(\n  YOUR_CLIENT_ID,\n  YOUR_CLIENT_SECRET,\n  YOUR_REDIRECT_URL\n);\n\nconst drive = google.drive({\n  version: 'v2',\n  auth: oauth2Client\n});\n```\n\nSee the [Options section](#request-options) for more information.\n\n## Usage\n\n### Specifying request body\n\nThe body of the request is specified in the `requestBody` parameter object of the request. The body is specified as a JavaScript object with key/value pairs. For example, this sample creates a watcher that posts notifications to a Google Cloud Pub/Sub topic when emails are sent to a gmail account:\n\n```js\nconst res = await gmail.users.watch({\n  userId: 'me',\n  requestBody: {\n    // Replace with `projects/${PROJECT_ID}/topics/${TOPIC_NAME}`\n    topicName: `projects/el-gato/topics/gmail`\n  }\n});\nconsole.log(res.data);\n```\n\n### Media uploads\nThis client supports multipart media uploads. The resource parameters are specified in the `requestBody` parameter object, and the media itself is specified in the `media.body` parameter with mime-type specified in `media.mimeType`.\n\nThis example uploads a plain text file to Google Drive with the title \"Test\" and contents \"Hello World\".\n\n``` js\nconst drive = google.drive({\n  version: 'v3',\n  auth: oauth2Client\n});\n\nconst res = await drive.files.create({\n  requestBody: {\n    name: 'Test',\n    mimeType: 'text/plain'\n  },\n  media: {\n    mimeType: 'text/plain',\n    body: 'Hello World'\n  }\n});\n```\n\nYou can also upload media by specifying `media.body` as a [Readable stream][stream]. This can allow you to upload very large files that cannot fit into memory.\n\n```js\nconst fs = require('fs');\n\nconst drive = google.drive({\n  version: 'v3',\n  auth: oauth2Client\n});\n\nasync function main() {\n  const res = await drive.files.create({\n    requestBody: {\n      name: 'testimage.png',\n      mimeType: 'image/png'\n    },\n    media: {\n      mimeType: 'image/png',\n      body: fs.createReadStream('awesome.png')\n    }\n  });\n  console.log(res.data);\n}\n\nmain().catch(console.error);\n```\n\nFor more examples of creation and modification requests with media attachments, take a look at the `samples/drive/upload.js` sample.\n\n### Request Options\nFor more fine-tuned control over how your API calls are made, we provide you with the ability to specify additional options that can be applied directly to the ['gaxios'][gaxios] object used in this library to make network calls to the API.\n\nYou may specify additional options either in the global `google` object or on a service client basis.  The options you specify are attached to the `gaxios` object so whatever `gaxios` supports, this library supports. You may also specify global or per-service request parameters that will be attached to all API calls you make.\n\nA full list of supported options can be [found here][requestopts].\n\n#### Global options\nYou can choose default options that will be sent with each request. These options will be used for every service instantiated by the google client. In this example, the `timeout` property of `GaxiosOptions` will be set for every request:\n\n```js\nconst {google} = require('googleapis');\ngoogle.options({\n  // All requests made with this object will use these settings unless overridden.\n  timeout: 1000,\n  auth: auth\n});\n```\n\nYou can also modify the parameters sent with each request:\n\n```js\nconst {google} = require('googleapis');\ngoogle.options({\n  // All requests from all services will contain the above query parameter\n  // unless overridden either in a service client or in individual API calls.\n  params: {\n    quotaUser: 'user123@example.com'\n  }\n});\n```\n\n#### Service-client options\n\nYou can also specify options when creating a service client.\n\n```js\nconst blogger = google.blogger({\n  version: 'v3',\n  // All requests made with this object will use the specified auth.\n  auth: 'API KEY';\n});\n```\n\nBy doing this, every API call made with this service client will use `'API KEY'` to authenticate.\n\n**Note:** Created clients are **immutable** so you must create a new one if you want to specify different options.\n\nSimilar to the examples above, you can also modify the parameters used for every call of a given service:\n\n```js\nconst blogger = google.blogger({\n  version: 'v3',\n  // All requests made with this service client will contain the\n  // blogId query parameter unless overridden in individual API calls.\n  params: {\n    blogId: '3213900'\n  }\n});\n\n// Calls with this drive client will NOT contain the blogId query parameter.\nconst drive = google.drive('v3');\n...\n\n```\n\n#### Request-level options\nYou can specify an `auth` object to be used per request. Each request also inherits the options specified at the service level and global level.\n\nFor example:\n\n```js\nconst {google} = require('googleapis');\nconst bigquery = google.bigquery('v2');\n\nasync function main() {\n\n  // This method looks for the GCLOUD_PROJECT and GOOGLE_APPLICATION_CREDENTIALS\n  // environment variables.\n  const auth = new google.auth.GoogleAuth({\n    scopes: ['https://www.googleapis.com/auth/cloud-platform']\n  });\n  const authClient = await auth.getClient();\n\n  const projectId = await auth.getProjectId();\n\n  const request = {\n    projectId,\n    datasetId: '<YOUR_DATASET_ID>',\n\n    // This is a \"request-level\" option\n    auth: authClient\n  };\n\n  const res = await bigquery.datasets.delete(request);\n  console.log(res.data);\n\n}\n\nmain().catch(console.error);\n```\n\nYou can also override *gaxios* options per request, such as `url`, `method`, and `responseType`.\n\nFor example:\n\n```js\nconst res = await drive.files.export({\n  fileId: 'asxKJod9s79', // A Google Doc\n  mimeType: 'application/pdf'\n}, {\n  // Make sure we get the binary data\n  responseType: 'stream'\n});\n```\n\n### Using a Proxy\nYou can use the following environment variables to proxy HTTP and HTTPS requests:\n\n- `HTTP_PROXY` / `http_proxy`\n- `HTTPS_PROXY` / `https_proxy`\n\nWhen HTTP_PROXY / http_proxy are set, they will be used to proxy non-SSL requests that do not have an explicit proxy configuration option present. Similarly, HTTPS_PROXY / https_proxy will be respected for SSL requests that do not have an explicit proxy configuration option. It is valid to define a proxy in one of the environment variables, but then override it for a specific request, using the proxy configuration option.\n\n### Getting Supported APIs\nYou can programatically obtain the list of supported APIs, and all available versions:\n\n```js\nconst {google} = require('googleapis');\nconst apis = google.getSupportedAPIs();\n```\n\nThis will return an object with the API name as object property names, and an array of version strings as the object values;\n\n### TypeScript\nThis library is written in TypeScript, and provides types out of the box. All classes and interfaces generated for each API are exported under the `${apiName}_${version}` namespace.  For example, the Drive v3 API types are all available from the `drive_v3` namespace:\n\n```ts\nimport { drive_v3 } from 'googleapis';\n```\n\n## Release Notes & Breaking Changes\nYou can find a detailed list of breaking changes and new features in our [Release Notes][releasenotes]. If you've used this library before `25.x`, see our [Release Notes][releasenotes] to learn about migrating your code from `24.x.x` to `25.x.x`. It's pretty easy :)\n\n## License\nThis library is licensed under Apache 2.0. Full license text is available in [LICENSE][license].\n\n## Contributing\nWe love contributions! Before submitting a Pull Request, it's always good to start with a new issue first. To learn more, see [CONTRIBUTING][contributing].\n\n## Questions/problems?\n* Ask your development related questions on [Stackoverflow][stackoverflow].\n* If you've found an bug/issue, please [file it on GitHub][bugs].\n\n\n[snyk-image]: https://snyk.io/test/github/googleapis/google-api-nodejs-client/badge.svg\n[snyk-url]: https://snyk.io/test/github/googleapis/google-api-nodejs-client\n[david-image]: https://david-dm.org/googleapis/google-api-nodejs-client.svg\n[david-url]: https://david-dm.org/googleapis/google-api-nodejs-client\n[npmimg]: https://img.shields.io/npm/v/googleapis.svg\n[npm]: https://www.npmjs.org/package/googleapis\n[circle]: https://circleci.com/gh/googleapis/google-api-nodejs-client\n[circleimg]: https://circleci.com/gh/googleapis/google-api-nodejs-client.svg?style=shield\n[releaselevel]: https://cloud.google.com/terms/launch-stages\n[releaselevelimg]: https://img.shields.io/badge/Release%20Level-Alpha-ff69b4.svg\n[bugs]: https://github.com/googleapis/google-api-nodejs-client/issues\n[node]: http://nodejs.org/\n[stackoverflow]: http://stackoverflow.com/questions/tagged/google-api-nodejs-client\n[apiexplorer]: https://developers.google.com/apis-explorer\n[usingkeys]: https://support.google.com/cloud/answer/6158862?hl=en\n[contributing]: https://github.com/googleapis/google-api-nodejs-client/blob/master/CONTRIBUTING.md\n[license]: https://github.com/googleapis/google-api-nodejs-client/tree/master/LICENSE\n[authdocs]: https://developers.google.com/identity/protocols/OpenIDConnect\n[gaxios]: https://github.com/JustinBeckwith/gaxios\n[stream]: http://nodejs.org/api/stream.html#stream_class_stream_readable\n[releasenotes]: https://github.com/googleapis/google-api-nodejs-client/releases\n[devconsole]: https://console.cloud.google.com/apis/credentials\n[oauth]: https://developers.google.com/identity/protocols/OAuth2\n[oauthexample]: https://github.com/googleapis/google-api-nodejs-client/tree/master/samples/oauth2.js\n[options]: https://github.com/googleapis/google-api-nodejs-client/tree/master#options\n[googlecloud]: https://cloud.google.com/nodejs/docs/reference/libraries\n[googlecloudapis]: https://cloud.google.com/nodejs/docs/reference/apis\n[cloudplatform]: https://cloud.google.com/docs/\n[codecovimg]: https://codecov.io/github/googleapis/google-api-nodejs-client/coverage.svg?branch=master\n[codecov]: https://codecov.io/github/googleapis/google-api-nodejs-client?branch=master\n[downloadsimg]: https://img.shields.io/npm/dm/googleapis.svg\n[downloads]: https://nodei.co/npm/googleapis/\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/googleapis/google-api-nodejs-client.git"
  },
  "scripts": {
    "build-tools": "tsc -p tsconfig.tools.json",
    "clean": "gts clean",
    "compile": "tsc -p .",
    "docs": "node build/src/generator/docs",
    "docs-test": "linkinator docs",
    "fix": "eslint --fix '**/*.js' && gts fix",
    "generate": "node build/src/generator/generate.js",
    "lint": "gts check && eslint 'samples/**/*.js'",
    "postgenerate": "npm run fix",
    "predocs": "npm run build-tools",
    "predocs-test": "npm run docs",
    "pregenerate": "npm run build-tools",
    "prepare": "npm run compile",
    "pretest": "npm run compile",
    "samples-test": "cd samples && npm link ../ && pwd && npm test",
    "system-test": "mocha build/system-test",
    "test": "c8 mocha build/test"
  },
  "types": "./build/src/index.d.ts",
  "version": "46.0.0"
}
