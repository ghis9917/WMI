'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Validation = require('./lib/Validation');

var _lodash = require('lodash');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Time = function () {
    function Time(hours, minutes) {
        _classCallCheck(this, Time);

        this._hours = hours;
        this._minutes = minutes;
    }

    _createClass(Time, [{
        key: 'isSame',
        value: function isSame(time) {
            return this._hours === time.hours && this._minutes === time.minutes;
        }
    }, {
        key: 'isAfter',
        value: function isAfter(time) {
            if (this.isSame(time)) {
                return false;
            }

            if (this._hours > time.hours) {
                return true;
            }

            return this._hours === time.hours && this._minutes >= time.minutes;
        }
    }, {
        key: 'isBefore',
        value: function isBefore(time) {
            if (this.isSame(time)) {
                return false;
            }

            return !this.isAfter(time);
        }
    }, {
        key: 'isSameOrAfter',
        value: function isSameOrAfter(time) {
            return this.isSame(time) || this.isAfter(time);
        }
    }, {
        key: 'toString',
        value: function toString() {
            return (0, _lodash.padStart)(this._hours, 2, '0') + ':' + (0, _lodash.padStart)(this._minutes, 2, '0');
        }
    }, {
        key: 'hours',
        get: function get() {
            return this._hours;
        }
    }, {
        key: 'minutes',
        get: function get() {
            return this._minutes;
        }
    }], [{
        key: 'fromString',
        value: function fromString(string) {
            if (!(0, _Validation.isValidTimeString)(string)) {
                throw new Error('The string `' + string + '` isn\'t a valid time string. ' + 'A time string must be a formatted as `H:i`, e.g. `06:00`, `18:00`.');
            }

            var _string$split = string.split(':');

            var _string$split2 = _slicedToArray(_string$split, 2);

            var hours = _string$split2[0];
            var minutes = _string$split2[1];


            return new Time(parseInt(hours), parseInt(minutes));
        }
    }]);

    return Time;
}();

exports.default = Time;