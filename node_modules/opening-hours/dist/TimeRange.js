'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Validation = require('./lib/Validation');

var _Time = require('./Time');

var _Time2 = _interopRequireDefault(_Time);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var TimeRange = function () {
    function TimeRange(start, end) {
        _classCallCheck(this, TimeRange);

        this._start = start;
        this._end = end;
    }

    _createClass(TimeRange, [{
        key: 'spillsOverToNextDay',
        value: function spillsOverToNextDay() {
            return this._end.isBefore(this._start);
        }
    }, {
        key: 'containsTime',
        value: function containsTime(time) {
            if (this.spillsOverToNextDay()) {
                if (time.isAfter(this._start)) {
                    return time.isAfter(this._end);
                }

                return time.isBefore(this._end);
            }

            return time.isSameOrAfter(this._start) && time.isBefore(this._end);
        }
    }, {
        key: 'overlaps',
        value: function overlaps(timeRange) {
            return this.containsTime(timeRange.start) || this.containsTime(timeRange.end);
        }
    }, {
        key: 'toString',
        value: function toString() {
            return this._start.toString() + '-' + this._end.toString();
        }
    }, {
        key: 'start',
        get: function get() {
            return this._start;
        }
    }, {
        key: 'end',
        get: function get() {
            return this._end;
        }
    }], [{
        key: 'fromString',
        value: function fromString(string) {
            if (!(0, _Validation.isValidTimeRangeString)(string)) {
                throw new Error('The string `' + string + '` isn\'t a valid time range string. ' + 'A time string must be a formatted as `H:i-H:i`, e.g. `09:00-18:00`.');
            }

            var times = string.split('-');

            return new TimeRange(_Time2.default.fromString(times[0]), _Time2.default.fromString(times[1]));
        }
    }]);

    return TimeRange;
}();

exports.default = TimeRange;