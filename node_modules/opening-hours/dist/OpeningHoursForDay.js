'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Validation = require('./lib/Validation');

var _TimeRange = require('./TimeRange');

var _TimeRange2 = _interopRequireDefault(_TimeRange);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var OpeningHoursForDay = function () {
    function OpeningHoursForDay() {
        _classCallCheck(this, OpeningHoursForDay);

        this._openingHours = [];
    }

    _createClass(OpeningHoursForDay, [{
        key: 'isOpenAt',
        value: function isOpenAt(time) {
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = this.openingHours[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var timeRange = _step.value;

                    if (timeRange.containsTime(time)) {
                        return true;
                    }
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            return false;
        }
    }, {
        key: '_guardAgainstTimeRangeOverlaps',
        value: function _guardAgainstTimeRangeOverlaps(openingHours) {
            if ((0, _Validation.hasTimeRangeOverlap)(openingHours)) {
                throw new Error('Time ranges aren\'t allowed to overlap.');
            }
        }
    }, {
        key: 'openingHours',
        get: function get() {
            return this._openingHours;
        }
    }], [{
        key: 'fromStrings',
        value: function fromStrings(strings) {
            var openingHoursForDay = new OpeningHoursForDay();

            openingHoursForDay._guardAgainstTimeRangeOverlaps(strings);

            openingHoursForDay._openingHours = strings.map(function (string) {
                return _TimeRange2.default.fromString(string);
            });

            return openingHoursForDay;
        }
    }]);

    return OpeningHoursForDay;
}();

exports.default = OpeningHoursForDay;