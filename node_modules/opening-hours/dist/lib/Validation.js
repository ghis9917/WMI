'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isValidTimeRangeString = exports.isValidTimeString = exports.isValidDayName = exports.isValidDateString = exports.hasTimeRangeOverlap = undefined;

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _Arr = require('./Arr');

var _Day = require('./Day');

var _TimeRange = require('../TimeRange');

var _TimeRange2 = _interopRequireDefault(_TimeRange);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var hasTimeRangeOverlap = exports.hasTimeRangeOverlap = function hasTimeRangeOverlap(timeRanges) {
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
        for (var _iterator = (0, _Arr.createUniquePairs)(timeRanges)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var _step$value = _slicedToArray(_step.value, 2);

            var rangeA = _step$value[0];
            var rangeB = _step$value[1];

            if (_TimeRange2.default.fromString(rangeA).overlaps(_TimeRange2.default.fromString(rangeB))) {
                return true;
            }
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
            }
        } finally {
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }

    return false;
};

var isValidDateString = exports.isValidDateString = function isValidDateString(string) {
    var parts = string.split('-');

    if (parts.length !== 3) {
        return false;
    }

    var year = parseInt(parts[0]);
    var month = parseInt(parts[1]);
    var day = parseInt(parts[2]);

    // http://stackoverflow.com/a/8390325/999733

    if (month < 1 || month > 12) {
        return false;
    }

    if (day < 1 || day > 31) {
        return false;
    }

    if ((month == 4 || month == 6 || month == 9 || month == 11) && day > 30) {
        return false;
    }

    if (month == 2 && (year % 400 == 0 || year % 4 == 0) && year % 100 != 0 && day > 29) {
        return false;
    }

    if (month == 2 && year % 100 == 0 && day > 29) {
        return false;
    }

    if (month == 2 && day > 28) {
        return false;
    }

    return true;
};

var isValidDayName = exports.isValidDayName = function isValidDayName(name) {
    return (0, _Day.days)().filter(function (day) {
        return day === name;
    }).length > 0;
};

var isValidTimeString = exports.isValidTimeString = function isValidTimeString(string) {
    return string.match('^(([0-1][0-9])|(2[0-4])):[0-5][0-9]$');
};

var isValidTimeRangeString = exports.isValidTimeRangeString = function isValidTimeRangeString(string) {
    var times = string.split('-');

    if (times.length !== 2) {
        return false;
    }

    return isValidTimeString(times[0]) && isValidTimeString(times[1]);
};

exports.default = {
    hasTimeRangeOverlap: hasTimeRangeOverlap,
    isValidDateString: isValidDateString,
    isValidDayName: isValidDayName,
    isValidTimeString: isValidTimeString,
    isValidTimeRangeString: isValidTimeRangeString
};