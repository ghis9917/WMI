'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _lodash = require('lodash');

var _Validation = require('./lib/Validation');

var _Day = require('./lib/Day');

var _Day2 = _interopRequireDefault(_Day);

var _OpeningHoursForDay = require('./OpeningHoursForDay');

var _OpeningHoursForDay2 = _interopRequireDefault(_OpeningHoursForDay);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var OpeningHours = function () {
    function OpeningHours() {
        var _this = this;

        _classCallCheck(this, OpeningHours);

        this._openingHours = {};
        _Day2.default.days().forEach(function (day) {
            return _this._openingHours[day] = new _OpeningHoursForDay2.default();
        });
    }

    _createClass(OpeningHours, [{
        key: 'fill',
        value: function fill(data) {
            var _this2 = this;

            var _parseOpeningHoursAnd = this._parseOpeningHoursAndExceptions(data);

            var openingHours = _parseOpeningHoursAnd.openingHours;
            var exceptions = _parseOpeningHoursAnd.exceptions;


            (0, _lodash.forEach)(openingHours, function (openingHours, day) {
                _this2._setOpeningHoursFromStrings(day, openingHours);
            });

            this._setExceptionsFromStrings(exceptions);

            return this;
        }
    }, {
        key: 'forWeek',
        value: function forWeek() {
            return this._openingHours;
        }
    }, {
        key: 'forDay',
        value: function forDay(day) {
            day = this._normalizeDayName(day);

            return this._openingHours[day];
        }
    }, {
        key: 'exceptions',
        value: function exceptions() {
            return this._exceptions;
        }
    }, {
        key: 'isOpenOn',
        value: function isOpenOn(day) {
            return this.forDay(day).openingHours.length > 0;
        }
    }, {
        key: 'isClosedOn',
        value: function isClosedOn(day) {
            return this.isOpenOn(day);
        }
    }, {
        key: '_parseOpeningHoursAndExceptions',
        value: function _parseOpeningHoursAndExceptions(data) {
            var _this3 = this;

            var _data$exceptions = data.exceptions;
            var exceptions = _data$exceptions === undefined ? [] : _data$exceptions;

            var openingHours = _objectWithoutProperties(data, ['exceptions']);

            (0, _lodash.forEach)(openingHours, function (openingHoursData, day) {
                openingHours[_this3._normalizeDayName(day)] = openingHoursData;
            });

            return { openingHours: openingHours, exceptions: exceptions };
        }
    }, {
        key: '_setOpeningHoursFromStrings',
        value: function _setOpeningHoursFromStrings(day, openingHours) {
            day = this._normalizeDayName(day);

            this._openingHours[day] = _OpeningHoursForDay2.default.fromStrings(openingHours);
        }
    }, {
        key: '_setExceptionsFromStrings',
        value: function _setExceptionsFromStrings(exceptions) {
            (0, _lodash.forIn)(exceptions, function (_, date) {
                if (!(0, _Validation.isValidDateString)(date)) {
                    throw new Error('Exception `' + date + '` isn\'t a valid date string. ' + 'Date strings must be formatted as `YYYY-MM-DD`, e.g. `2016-10-06`.');
                }
            });

            this._exceptions = (0, _lodash.mapValues)(exceptions, function (openingHours) {
                return _OpeningHoursForDay2.default.fromStrings(openingHours);
            });
        }
    }, {
        key: '_normalizeDayName',
        value: function _normalizeDayName(day) {
            day = day.toLowerCase();

            if (!(0, _Validation.isValidDayName)(day)) {
                throw new Error('Day `' + day + '` isn\'t a valid day name. ' + 'Valid day names are lowercase english words, e.g. `monday`, `thursday`.');
            }

            return day;
        }
    }], [{
        key: 'create',
        value: function create(data) {
            return new OpeningHours().fill(data);
        }
    }]);

    return OpeningHours;
}();

exports.default = OpeningHours;