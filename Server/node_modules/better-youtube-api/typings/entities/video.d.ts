import { YouTube } from '..';
import { Thumbnail, ISODuration } from '../types';
import { YTComment } from './comment';
/**
 * A YouTube video.
 */
export declare class Video {
    /**
     * The name of the endpoint used for this entity.
     */
    static endpoint: string;
    /**
     * The parts to request for this entity.
     */
    static part: string;
    /**
     * YouTube object that created the video.
     */
    youtube: YouTube;
    /**
     * The raw data of the video.
     */
    data: any;
    /**
     * Whether or not this is a full video object.
     */
    full: boolean;
    /**
     * The ID of the video.
     */
    id: string;
    /**
     * The title of the video.
     */
    title: string;
    /**
     * The description of the video.
     */
    description: string;
    /**
     * The thumbnails of the video.
     */
    thumbnails: {
        default?: Thumbnail;
        high?: Thumbnail;
        maxres?: Thumbnail;
        medium?: Thumbnail;
        standard?: Thumbnail;
    };
    /**
     * The date the video was published.
     */
    datePublished: Date;
    /**
     * The ID of the channel that uploaded the video.
     */
    channelId: string;
    _length: ISODuration;
    /**
     * The minutes of the video.
     */
    minutes: number;
    /**
     * The seconds of the video.
     */
    seconds: number;
    /**
     * The url of the video.
     */
    url: string;
    /**
     * The short url of the video, i.e. https://youtu.be/id
     */
    shortUrl: string;
    /**
     * The number of likes the video has.
     */
    likes: number;
    /**
     * The number of dislikes the video has.
     */
    dislikes: number;
    /**
     * The number of views the video has.
     */
    views: number;
    /**
     * Whether or not this video COULD BE private. True if the video might
     * be private, as you cannot check if playlist items are private.
     * I would recommend you try and fetch the video and catch an error
     * if it is private.
     */
    private: boolean;
    /**
     * The video's comments. Only defined when Video#fetchComments is called.
     */
    comments: YTComment[];
    constructor(youtube: YouTube, data: any);
    private _init;
    /**
     * Posts a comment to the video.
     * Must be using an access token with correct scopes.
     * @param text The text of the comment.
     */
    postComment(text: string): Promise<YTComment>;
    /**
     * Fetches this video and reassigns this object to the new video object.
     * Only useful if `this.full` is false, or if you want updated video info.
     */
    fetch(): Promise<this & Video>;
    /**
     * Fetches the video's comments and assigns them to Video#comments.
     * @param maxResults The maximum amount of comments to fetch
     */
    fetchComments(maxResults?: number): Promise<YTComment[]>;
}
