{"version":3,"sources":["../src/entities/video.ts"],"names":[],"mappings":"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","file":"video.js","sourcesContent":["import { YouTube } from '..'\nimport { Thumbnail, ISODuration } from '../types'\nimport { YTComment } from './comment'\nimport { parseIsoDuration } from '../util'\n\n/**\n * A YouTube video.\n */\nexport class Video {\n  /**\n   * The name of the endpoint used for this entity.\n   */\n  public static endpoint = 'videos'\n\n  /**\n   * The parts to request for this entity.\n   */\n  public static part = 'snippet,contentDetails,statistics,status'\n\n  /**\n   * YouTube object that created the video.\n   */\n  public youtube: YouTube\n\n  /**\n   * The raw data of the video.\n   */\n  public data: any\n\n  /**\n   * Whether or not this is a full video object.\n   */\n  public full: boolean\n\n  /**\n   * The ID of the video.\n   */\n  public id: string\n\n  /**\n   * The title of the video.\n   */\n  public title: string\n\n  /**\n   * The description of the video.\n   */\n  public description: string\n\n  /**\n   * The thumbnails of the video.\n   */\n  public thumbnails: {\n    default?: Thumbnail,\n    high?: Thumbnail,\n    maxres?: Thumbnail\n    medium?: Thumbnail,\n    standard?: Thumbnail\n  }\n\n  /**\n   * The date the video was published.\n   */\n  public datePublished: Date\n\n  /**\n   * The ID of the channel that uploaded the video.\n   */\n  public channelId: string\n\n  public _length: ISODuration\n\n  /**\n   * The minutes of the video.\n   */\n  public minutes: number\n\n  /**\n   * The seconds of the video.\n   */\n  public seconds: number\n\n  /**\n   * The url of the video.\n   */\n  public url: string\n\n  /**\n   * The short url of the video, i.e. https://youtu.be/id\n   */\n  public shortUrl: string\n\n  /**\n   * The number of likes the video has.\n   */\n  public likes: number\n\n  /**\n   * The number of dislikes the video has.\n   */\n  public dislikes: number\n\n  /**\n   * The number of views the video has.\n   */\n  public views: number\n\n  /**\n   * Whether or not this video COULD BE private. True if the video might\n   * be private, as you cannot check if playlist items are private.\n   * I would recommend you try and fetch the video and catch an error\n   * if it is private.\n   */\n  public private: boolean\n\n  /**\n   * The video's comments. Only defined when Video#fetchComments is called.\n   */\n  public comments: YTComment[]\n\n  constructor (youtube: YouTube, data) {\n    this.youtube = youtube\n    this.data = data\n\n    this._init(data)\n  }\n\n  private _init (data: any) {\n    if (data.kind === 'youtube#video') {\n      const video = data\n\n      this._length = parseIsoDuration(video.contentDetails.duration)\n      this.minutes = (this._length.hours * 60) + this._length.minutes\n      this.seconds = this._length.seconds\n\n      this.likes = Number(video.statistics.likeCount)\n      this.dislikes = Number(video.statistics.dislikeCount)\n      this.views = Number(video.statistics.viewCount)\n      this.id = video.id\n    } else if (data.kind === 'youtube#playlistItem') {\n      this.id = data.snippet.resourceId.videoId\n      this.private = data.snippet.title === 'Private video'\n    } else if (data.kind === 'youtube#searchResult') {\n      this.id = data.id.videoId\n    } else {\n      throw new Error(`Invalid video type: ${data.kind}`)\n    }\n\n    this.title = data.snippet.title\n    this.description = data.snippet.description\n    this.thumbnails = data.snippet.thumbnails\n    this.datePublished = new Date(data.snippet.publishedAt)\n    this.channelId = data.snippet.channelId\n    this.full = data.kind === 'youtube#video'\n    this.url = `https://youtube.com/watch?v=${this.id}`\n    this.shortUrl = `https://youtu.be/${this.id}`\n\n    return this\n  }\n\n  /**\n   * Posts a comment to the video.\n   * Must be using an access token with correct scopes.\n   * @param text The text of the comment.\n   */\n  /* istanbul ignore next */\n  public async postComment (text: string) {\n    const comment = await this.youtube.oauth.postComment(text, this.channelId, this.id)\n\n    if (this.comments !== undefined) {\n      this.comments.push(comment)\n    } else {\n      this.comments = [ comment ]\n    }\n\n    return comment\n  }\n\n  /**\n   * Fetches this video and reassigns this object to the new video object.\n   * Only useful if `this.full` is false, or if you want updated video info.\n   */\n  public async fetch () {\n    const video = await this.youtube.getVideo(this.id)\n    return Object.assign(this, video)\n  }\n\n  /**\n   * Fetches the video's comments and assigns them to Video#comments.\n   * @param maxResults The maximum amount of comments to fetch\n   */\n  public async fetchComments (maxResults: number = -1) {\n    this.comments = await this.youtube.getVideoComments(this.id, maxResults)\n    return this.comments\n  }\n}\n"],"sourceRoot":"../../src"}