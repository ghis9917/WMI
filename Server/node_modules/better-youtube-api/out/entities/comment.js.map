{"version":3,"sources":["../src/entities/comment.ts"],"names":[],"mappings":";;;;;;;;;;;AAEA,MAAa,SAAS;IAoHpB,YAAa,OAAgB,EAAE,IAAI,EAAE,IAAyB;QA1F9D;;WAEG;QACI,SAAI,GAAS,IAAI,CAAA;QAwFtB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAA;QACtB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAA;QAEhB,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,CAAA;IACxB,CAAC;IAEO,KAAK,CAAE,IAAI,EAAE,IAAyB;QAC5C,IAAI,IAAI,CAAC,IAAI,KAAK,iBAAiB,EAAE;YACnC,MAAM,IAAI,KAAK,CAAC,yBAAyB,IAAI,CAAC,IAAI,EAAE,CAAC,CAAA;SACtD;QAED,MAAM,OAAO,GAAG,IAAI,CAAA;QAEpB,IAAI,CAAC,EAAE,GAAG,OAAO,CAAC,EAAE,CAAA;QACpB,IAAI,CAAC,MAAM,GAAG;YACZ,QAAQ,EAAE,OAAO,CAAC,OAAO,CAAC,iBAAiB;YAC3C,MAAM,EAAE,OAAO,CAAC,OAAO,CAAC,qBAAqB;YAC7C,SAAS,EAAE,OAAO,CAAC,OAAO,CAAC,eAAe,CAAC,KAAK;YAChD,UAAU,EAAE,OAAO,CAAC,OAAO,CAAC,gBAAgB;SAC7C,CAAA;QACD,IAAI,CAAC,IAAI,GAAG;YACV,SAAS,EAAE,OAAO,CAAC,OAAO,CAAC,WAAW;YACtC,QAAQ,EAAE,OAAO,CAAC,OAAO,CAAC,YAAY;SACvC,CAAA;QACD,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,OAAO,CAAA;QAC/B,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,SAAS,IAAI,GAAG,CAAA;QACvC,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC,SAAS,CAAA;QAC9B,IAAI,CAAC,aAAa,GAAG,OAAO,CAAC,WAAW,CAAA;QACxC,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC,SAAS,CAAA;QACnC,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,SAAS,CAAA;QAEnJ,IAAI,IAAI,CAAC,QAAQ,EAAE;YACjB,IAAI,CAAC,GAAG,GAAG,sBAAsB,GAAG,CAAC,IAAI,KAAK,SAAS,CAAC,CAAC,CAAC,WAAW,IAAI,CAAC,QAAQ,kBAAkB,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,WAAW,IAAI,CAAC,QAAQ,OAAO,IAAI,CAAC,EAAE,EAAE,CAAC,CAAA;SAC1J;QAED,IAAI,CAAC,OAAO,GAAG,EAAE,CAAA;IACnB,CAAC;IAED;;;;OAIG;IACH,0BAA0B;IACnB,IAAI,CAAE,IAAY;QACvB,OAAO,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,WAAW,CAAC,IAAI,EAAE,IAAI,CAAC,EAAE,CAAC,CAAA;IACtD,CAAC;IAED;;;;OAIG;IACU,YAAY,CAAE,aAAqB,CAAC,CAAC;;YAChD,IAAI,CAAC,OAAO,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,iBAAiB,CAAC,IAAI,CAAC,EAAE,EAAE,UAAU,CAAC,CAAA;YACxE,OAAO,IAAI,CAAC,OAAO,CAAA;QACrB,CAAC;KAAA;;AA7KH,8BA8KC;AA7KC;;GAEG;AACW,kBAAQ,GAAG,UAAU,CAAA;AAEnC;;GAEG;AACW,cAAI,GAAG,SAAS,CAAA","file":"comment.js","sourcesContent":["import { YouTube } from '..'\n\nexport class YTComment {\n  /**\n   * The name of the endpoint used for this entity.\n   */\n  public static endpoint = 'comments'\n\n  /**\n   * The parts to request for this entity.\n   */\n  public static part = 'snippet'\n\n  /**\n   * The YouTube object used to create the comment.\n   */\n  public youtube: YouTube\n\n  /**\n   * The raw data from the YouTube API of the comment.\n   */\n  public data: any\n\n  /**\n   * The comment's unique YouTube ID.\n   */\n  public id: string\n\n  /**\n   * Whether or not this a full comment object.\n   */\n  public full: true = true\n\n  /**\n   * The comment's author.\n   */\n  public author: {\n    /**\n     * The author's YouTube username. May not be unique.\n     */\n    username: string,\n\n    /**\n     * The author's avatar URL.\n     */\n    avatar: string,\n\n    /**\n     * The author's channel ID.\n     */\n    channelId: string,\n\n    /**\n     * The author's channel URL.\n     */\n    channelUrl: string\n  }\n\n  /**\n   * The comment's content.\n   */\n  public text: {\n    /**\n     * What YouTube displays to the user viewing the comment.\n     */\n    displayed: string,\n    /**\n     * The comment's plain text.\n     */\n    original: string\n  }\n\n  /**\n   * Whether or not you can like/dislike the comment.\n   */\n  public rateable: boolean\n\n  /**\n   * Either YouTube thinks it's popular, or it has at least 100 likes.\n   */\n  public popular: boolean\n\n  /**\n   * The number of likes the comment has received.\n   */\n  public likes: number\n\n  /**\n   * The url of the comment.\n   */\n  public url?: string\n\n  /**\n   * The date the comment was published.\n   */\n  public datePublished: Date\n\n  /**\n   * Either the date the comment was last edited, or the date it was\n   * posted.\n   */\n  public dateEdited: Date\n\n  /**\n   * Either the ID of the video that it is commenting on, the ID of the\n   * comment it is replying to, or the ID of the channel it is commenting\n   * on.\n   * Undefined whenever the comment is fetched directly using the ID.\n   */\n  public parentId: string\n\n  /**\n   * Replies directed to the comment. If the comment was fetched from a video,\n   * then this will be partially filled. You'll need to use Comment#fetchReplies\n   * to get all of the replies, though.\n   */\n  public replies: YTComment[]\n\n  constructor (youtube: YouTube, data, type: 'video' | 'channel') {\n    this.youtube = youtube\n    this.data = data\n\n    this._init(data, type)\n  }\n\n  private _init (data, type: 'video' | 'channel') {\n    if (data.kind !== 'youtube#comment') {\n      throw new Error(`Invalid comment type: ${data.kind}`)\n    }\n\n    const comment = data\n\n    this.id = comment.id\n    this.author = {\n      username: comment.snippet.authorDisplayName,\n      avatar: comment.snippet.authorProfileImageUrl,\n      channelId: comment.snippet.authorChannelId.value,\n      channelUrl: comment.snippet.authorChannelUrl\n    }\n    this.text = {\n      displayed: comment.snippet.textDisplay,\n      original: comment.snippet.textOriginal\n    }\n    this.rateable = comment.canRate\n    this.popular = comment.likeCount >= 100\n    this.likes = comment.likeCount\n    this.datePublished = comment.publishedAt\n    this.dateEdited = comment.updatedAt\n    this.parentId = comment.snippet.parentId ? comment.snippet.parentId : comment.snippet.videoId ? comment.snippet.videoId : comment.snippet.channelId\n\n    if (this.parentId) {\n      this.url = 'https://youtube.com/' + (type === 'channel' ? `channel/${this.parentId}/discussion?lc=${this.id}` : `watch?v=${this.parentId}&lc=${this.id}`)\n    }\n\n    this.replies = []\n  }\n\n  /**\n   * Edits the comment.\n   * Must be using an access token with correct scopes.\n   * @param text The new text of the comment.\n   */\n  /* istanbul ignore next */\n  public edit (text: string) {\n    return this.youtube.oauth.editComment(text, this.id)\n  }\n\n  /**\n   * Fetches replies to the comment.\n   * @param maxResults The maximum amount of replies to fetch. Fetches all comments if not included\n   * or less than 0.\n   */\n  public async fetchReplies (maxResults: number = -1) {\n    this.replies = await this.youtube.getCommentReplies(this.id, maxResults)\n    return this.replies\n  }\n}\n"],"sourceRoot":"../../src"}