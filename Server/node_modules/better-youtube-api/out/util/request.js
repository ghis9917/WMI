"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const https_1 = require("https");
const url_1 = require("url");
exports.request = {
    api: (subUrl, params, token, type) => {
        /* istanbul ignore next */
        const url = 'https://www.googleapis.com/youtube/v3' + (subUrl.startsWith('/') ? '' : '/') + subUrl + parseParams(params) +
            (type === 'key' ? (params ? `&key=${token}` : `?key=${token}`) : '');
        /* istanbul ignore next */
        return get(url, type === 'oauth' ? token : undefined);
    },
    post: (subUrl, params, token, data) => {
        /* istanbul ignore next */
        const url = 'https://www.googleapis.com/youtube/v3' + (subUrl.startsWith('/') ? '' : '/') + subUrl + parseParams(params);
        /* istanbul ignore next */
        return post(url, data, token);
    },
    put: (subUrl, params, token, data) => {
        /* istanbul ignore next */
        const url = 'https://www.googleapis.com/youtube/v3' + (subUrl.startsWith('/') ? '' : '/') + subUrl + parseParams(params);
        /* istanbul ignore next */
        return put(url, data, token);
    }
};
/**
 * @ignore
 */
/* istanbul ignore next */
function get(url, token) {
    const options = parseUrlToOptions(url, 'GET');
    if (token) {
        options.headers['Authorization'] = `Bearer ${token}`;
    }
    return req(options, req => reqCallback(req));
}
/**
 * @ignore
 */
/* istanbul ignore next */
function post(url, data, token) {
    const options = parseUrlToOptions(url, 'POST');
    if (token) {
        options.headers['Authorization'] = `Bearer ${token}`;
    }
    return req(options, req => reqCallback(req, data));
}
/**
 * @ignore
 */
/* istanbul ignore next */
function put(url, data, token) {
    const options = parseUrlToOptions(url, 'PUT');
    if (token) {
        options.headers['Authorization'] = `Bearer ${token}`;
    }
    return req(options, req => reqCallback(req, data));
}
/**
 * @ignore
 */
/* istanbul ignore next */
function parseUrlToOptions(url, type) {
    const parsed = url_1.parse(url);
    return {
        hostname: parsed.hostname,
        port: parsed.port ? parsed.port : 443,
        path: parsed.path,
        method: type,
        headers: {
            'Content-Type': 'application/json'
        }
    };
}
/**
 * @ignore
 */
/* istanbul ignore next */
function req(options, reqFunction) {
    return new Promise((resolve, reject) => {
        const cb = (res) => {
            let data = '';
            res.setEncoding('utf8');
            res.on('data', chunk => {
                data += chunk;
            });
            res.on('end', () => {
                if (res.statusCode === 404) {
                    return reject(new Error('Not found'));
                }
                const parsed = JSON.parse(data);
                if (parsed.error) {
                    return reject(new Error(parsed.error.message));
                }
                return resolve(parsed);
            });
            res.on('error', error => {
                return reject(error);
            });
        };
        reqFunction(https_1.request(options, cb));
    });
}
/**
 * @ignore
 */
/* istanbul ignore next */
function reqCallback(req, data) {
    req.on('error', error => {
        throw error;
    });
    if (data) {
        req.write(data);
    }
    req.end();
}
/**
 * @ignore
 */
/* istanbul ignore next */
function parseParams(params) {
    let url = '';
    for (let param in params) {
        url += (!url.includes('?') ? '?' : '&') + param + '=' + params[param];
    }
    return url;
}

//# sourceMappingURL=request.js.map
